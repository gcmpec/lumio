---
import Layout from "@/layouts/Layout.astro";
import { buttonVariants } from "@/components/ui/button";
import { Label } from "@/components/ui/label";

const user = Astro.locals.user ?? { name: "", email: "" };
---

<Layout title="O Meu Trabalho">
  <div
    id="activity-page"
    data-user-name={user.name ?? ""}
    data-user-email={user.email ?? ""}
  >
    <div class="grid gap-8 lg:grid-cols-[minmax(0,2.25fr)_minmax(0,1fr)] xl:gap-12">
      <section id="start-form-section" data-activity-card="form" class="rounded-xl border bg-card p-6 shadow space-y-6">
        <div>
          <h2 class="text-xl font-semibold">Iniciar atividade</h2>
          <p class="text-sm text-muted-foreground">Seleciona o manager, engagement e tarefa que vais executar.</p>
        </div>
        <form id="activity-form" class="space-y-4">
          <div class="space-y-2">
            <Label htmlFor="manager-search-input">Manager</Label>
            <div
              id="manager-searchbox"
              class="relative"
              data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'
            >
              <div class="relative">
                <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                  <svg
                    class="size-4 shrink-0 text-muted-foreground"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <circle cx="11" cy="11" r="8" />
                    <path d="m21 21-4.3-4.3" />
                  </svg>
                </div>
                <input
                  id="manager-search-input"
                  class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text"
                  role="combobox"
                  aria-expanded="false"
                  aria-controls="manager-search-results"
                  placeholder="A carregar managers..."
                  autocomplete="off"
                  data-hs-combo-box-input
                  disabled
                  required
                />
              </div>
              <div
                id="manager-search-dropdown"
                class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                data-hs-combo-box-output
              >
                <div
                  id="manager-search-results"
                  class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                  role="listbox"
                  data-hs-combo-box-output-items-wrapper
                ></div>
                <div
                  id="manager-search-empty"
                  class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                  data-manager-empty
                >
                  Sem resultados
                </div>
              </div>
              <input type="hidden" id="manager-select" name="manager" />
            </div>
          </div>
  
          <div class="space-y-2">
            <Label htmlFor="engagement-search-input">Engagement</Label>
            <div id="engagement-searchbox" class="relative" data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'>
              <div class="relative">
                <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                  <svg
                    class="size-4 shrink-0 text-muted-foreground"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <circle cx="11" cy="11" r="8" />
                    <path d="m21 21-4.3-4.3" />
                  </svg>
                </div>
                <input
                  id="engagement-search-input"
                  class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text"
                  role="combobox"
                  aria-expanded="false"
                  aria-controls="engagement-search-results"
                  placeholder="Seleciona um manager primeiro"
                  autocomplete="off"
                  data-hs-combo-box-input
                  disabled
                  required
                />
              </div>
              <div
                id="engagement-search-dropdown"
                class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                data-hs-combo-box-output
              >
                <div
                  id="engagement-search-results"
                  class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                  role="listbox"
                  data-hs-combo-box-output-items-wrapper
                ></div>
                <div
                  id="engagement-search-empty"
                  class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                >
                  Sem resultados
                </div>
              </div>
              <input type="hidden" id="engagement-select" />
            </div>
          </div>
  
          <div class="grid gap-4 md:grid-cols-2">
            <div class="space-y-2">
              <Label htmlFor="task-search-input">Tarefa</Label>
              <div id="task-searchbox" class="relative" data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'>
                <div class="relative">
                  <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                    <svg
                      class="size-4 shrink-0 text-muted-foreground"
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <circle cx="11" cy="11" r="8" />
                      <path d="m21 21-4.3-4.3" />
                    </svg>
                  </div>
                  <input
                    id="task-search-input"
                    class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    type="text"
                    role="combobox"
                    aria-expanded="false"
                    aria-controls="task-search-results"
                    placeholder="Seleciona o engagement primeiro"
                    autocomplete="off"
                    data-hs-combo-box-input
                    disabled
                  />
                </div>
                <div
                  id="task-search-dropdown"
                  class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                  data-hs-combo-box-output
                >
                  <div
                    id="task-search-results"
                    class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                    role="listbox"
                    data-hs-combo-box-output-items-wrapper
                  ></div>
                  <div
                    id="task-search-empty"
                    class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                  >
                    Sem resultados
                  </div>
                </div>
                <input type="hidden" id="task-select" />
              </div>
            </div>
            <div class="space-y-2">
              <Label htmlFor="deliverable-search-input">Deliverable</Label>
              <div id="deliverable-searchbox" class="relative" data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'>
                <div class="relative">
                  <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                    <svg
                      class="size-4 shrink-0 text-muted-foreground"
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <circle cx="11" cy="11" r="8" />
                      <path d="m21 21-4.3-4.3" />
                    </svg>
                  </div>
                  <input
                    id="deliverable-search-input"
                    class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    type="text"
                    role="combobox"
                    aria-expanded="false"
                    aria-controls="deliverable-search-results"
                    placeholder="Seleciona o engagement primeiro"
                    autocomplete="off"
                    data-hs-combo-box-input
                    disabled
                  />
                </div>
                <div
                  id="deliverable-search-dropdown"
                  class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                  data-hs-combo-box-output
                >
                  <div
                    id="deliverable-search-results"
                    class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                    role="listbox"
                    data-hs-combo-box-output-items-wrapper
                  ></div>
                  <div
                    id="deliverable-search-empty"
                    class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                  >
                    Sem resultados
                  </div>
                </div>
                <input type="hidden" id="deliverable-select" />
              </div>
            </div>
          </div>
  
          <div class="space-y-2">
            <Label htmlFor="periodicity-search-input">Periodicidade</Label>
            <div id="periodicity-searchbox" class="relative" data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'>
              <div class="relative">
                <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                  <svg
                    class="size-4 shrink-0 text-muted-foreground"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <circle cx="11" cy="11" r="8" />
                    <path d="m21 21-4.3-4.3" />
                  </svg>
                </div>
                <input
                  id="periodicity-search-input"
                  class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text"
                  role="combobox"
                  aria-expanded="false"
                  aria-controls="periodicity-search-results"
                  placeholder="Seleciona um deliverable primeiro"
                  autocomplete="off"
                  data-hs-combo-box-input
                  disabled
                />
              </div>
              <div
                id="periodicity-search-dropdown"
                class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                data-hs-combo-box-output
              >
                <div
                  id="periodicity-search-results"
                  class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                  role="listbox"
                  data-hs-combo-box-output-items-wrapper
                ></div>
                <div
                  id="periodicity-search-empty"
                  class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                >
                  Sem resultados
                </div>
              </div>
              <input type="hidden" id="deliverable-periodicity" />
            </div>
          </div>
  
          <div class="space-y-2">
            <div class="flex items-center gap-2">
              <input type="checkbox" id="is-review" class="h-4 w-4 rounded border border-input" />
              <Label htmlFor="is-review" class="text-sm font-medium">Revisão de trabalho realizado</Label>
            </div>
            <div id="review-target-wrapper" class="hidden ml-6 space-y-2">
              <p class="text-sm text-muted-foreground">Indica o alvo da revisão:</p>
              <div class="flex flex-col gap-2">
                <label class="inline-flex items-center gap-2 text-sm">
                  <input type="radio" name="review-target" value="Staff" class="h-4 w-4 border-input" />
                  Outro staff
                </label>
                <label class="inline-flex items-center gap-2 text-sm">
                  <input type="radio" name="review-target" value="GDS" class="h-4 w-4 border-input" />
                  Trabalho do GDS
                </label>
              </div>
            </div>
          </div>
  
          <button type="submit" class={buttonVariants({ size: "lg" })}>
            Iniciar atividade
          </button>
          <p id="activity-error" class="text-sm text-red-600 hidden"></p>
        </form>
      </section>
  
      <div class="space-y-6">
        <section
          id="in-progress"
          data-activity-card="active"
          class="hidden space-y-4 rounded-xl border bg-card p-6 shadow transition-all"
        >
          <div class="flex flex-col gap-3">
            <div class="flex items-start justify-between gap-4">
              <div class="flex items-center gap-3">
                <span
                  id="in-progress-indicator"
                  class="inline-flex items-center gap-2 rounded-full border border-emerald-200 bg-emerald-50 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-emerald-700"
                >
                  <span class="h-2 w-2 rounded-full bg-emerald-500"></span>
                  EM CURSO
                </span>
                <h2 class="text-xl font-semibold">Atividade em curso</h2>
              </div>
              <span id="timer" class="text-3xl font-bold">00:00</span>
            </div>
            <p class="text-sm text-muted-foreground">Mantém este separador aberto enquanto trabalhas.</p>
          </div>
  
          <dl class="grid gap-4 md:grid-cols-2 text-sm">
            <div>
              <dt class="font-medium text-muted-foreground">Colaborador</dt>
              <dd id="progress-user"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Manager</dt>
              <dd id="progress-manager"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Engagement</dt>
              <dd id="progress-engagement"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Tarefa</dt>
              <dd id="progress-task"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Deliverable</dt>
              <dd id="progress-deliverable"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Revisão</dt>
              <dd id="progress-review"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Início</dt>
              <dd id="progress-start"></dd>
            </div>
          </dl>
  
        <button id="stop-button" class={buttonVariants({ size: "lg", variant: "destructive" })}>
          Parar atividade
        </button>
        <p id="stop-message" class="text-sm text-green-600 hidden"></p>
      </section>
  
      <section
        id="start-card"
        data-activity-card="start"
        class="rounded-xl border bg-card p-6 shadow-sm transition-opacity"
      >
        <div class="space-y-2">
          <h2 class="text-lg font-semibold">Iniciar atividade</h2>
          <p class="text-sm text-muted-foreground">Preenche o formulário para começares um novo trabalho.</p>
        </div>
      </section>
  
      <section
        id="resume-card"
        data-activity-card="resume"
        class="rounded-xl border bg-card p-6 shadow-sm transition-opacity"
      >
        <div class="space-y-2">
          <h2 class="text-lg font-semibold">Retomar atividade</h2>
          <p class="text-sm text-muted-foreground">Vê aqui as atividades pausadas e retoma quando quiseres.</p>
        </div>
        <div id="resume-content" class="space-y-3 text-sm text-muted-foreground">
          <p>Não tens atividades pausadas.</p>
        </div>
      </section>
      </div>
    </div>
  
  
  <script is:inline>
    const root = document.getElementById('activity-page');
    const userName = root?.dataset?.userName ?? '';
    const userEmail = root?.dataset?.userEmail ?? '';

    const activityForm = document.getElementById('activity-form');
    const inProgressSection = document.getElementById('in-progress');
    const activityError = document.getElementById('activity-error');
    const stopMessage = document.getElementById('stop-message');
    const timerDisplay = document.getElementById('timer');

    const managerSelect = document.getElementById('manager-select');
    const managerSearchInput = document.getElementById('manager-search-input');
    const managerSearchDropdown = document.getElementById('manager-search-dropdown');
    const managerSearchResults = document.getElementById('manager-search-results');
    const managerSearchEmpty = document.getElementById('manager-search-empty');
    const managerSearchBox = document.getElementById('manager-searchbox');
    const engagementSearchInput = document.getElementById('engagement-search-input');
    const engagementSearchDropdown = document.getElementById('engagement-search-dropdown');
    const engagementSearchResults = document.getElementById('engagement-search-results');
    const engagementSearchEmpty = document.getElementById('engagement-search-empty');
    const engagementSearchBox = document.getElementById('engagement-searchbox');
    const engagementSelect = document.getElementById('engagement-select');
    const taskSearchInput = document.getElementById('task-search-input');
    const taskSearchDropdown = document.getElementById('task-search-dropdown');
    const taskSearchResults = document.getElementById('task-search-results');
    const taskSearchEmpty = document.getElementById('task-search-empty');
    const taskSearchBox = document.getElementById('task-searchbox');
    const taskSelect = document.getElementById('task-select');
    const deliverableSearchInput = document.getElementById('deliverable-search-input');
    const deliverableSearchDropdown = document.getElementById('deliverable-search-dropdown');
    const deliverableSearchResults = document.getElementById('deliverable-search-results');
    const deliverableSearchEmpty = document.getElementById('deliverable-search-empty');
    const deliverableSearchBox = document.getElementById('deliverable-searchbox');
    const deliverableSelect = document.getElementById('deliverable-select');
    const periodicitySearchInput = document.getElementById('periodicity-search-input');
    const periodicitySearchDropdown = document.getElementById('periodicity-search-dropdown');
    const periodicitySearchResults = document.getElementById('periodicity-search-results');
    const periodicitySearchEmpty = document.getElementById('periodicity-search-empty');
    const periodicitySearchBox = document.getElementById('periodicity-searchbox');
    const periodicitySelect = document.getElementById('deliverable-periodicity');
    const reviewCheckbox = document.getElementById('is-review');
    const reviewTargetWrapper = document.getElementById('review-target-wrapper');
    const startSection = document.getElementById('start-form-section');
    const startCard = document.getElementById('start-card');
    const resumeCard = document.getElementById('resume-card');
    const inProgressIndicator = document.getElementById('in-progress-indicator');
    const inProgressIndicatorDot = inProgressIndicator ? inProgressIndicator.querySelector('span') : null;

    const periodicityOptions = [
      { value: 'daily', label: 'Diariamente' },
      { value: 'weekly', label: 'Semanalmente' },
      { value: 'monthly', label: 'Mensalmente' },
      { value: 'bimonthly', label: 'Bimensalmente' },
      { value: 'quarterly', label: 'Trimestralmente' },
      { value: 'semiannual', label: 'Semestralmente' },
      { value: 'annual', label: 'Anualmente' },
      { value: 'not_applicable', label: 'Não aplicável' },
    ];
    const periodicityLabelMap = periodicityOptions.reduce((accumulator, option) => {
      accumulator[option.value] = option.label;
      return accumulator;
    }, {});
    const availabilityTargets = [startSection, startCard, resumeCard].filter(Boolean);

    const formatManagerLabel = (entry) => {
      if (!entry) {
        return '';
      }
      const name = entry.manager?.name ?? '';
      const email = entry.manager?.email ?? '';
      if (name && email) {
        return `${name} (${email})`;
      }
      return name || email;
    };

    const createSearchCombo = (config) => {
      const {
        input,
        hiddenInput,
        dropdown,
        results,
        emptyState,
        box,
        messages,
        getId,
        formatItem,
        getSearchValues,
        idPrefix,
      } = config;

      if (!input || !hiddenInput || !dropdown || !results) {
        return {
          setItems: () => {},
          clearSelection: () => {},
          setDisabled: () => {},
          setPlaceholder: () => {},
          setSelectionById: () => {},
          getSelectedId: () => null,
          getSelectedItem: () => null,
          setMessages: () => {},
        };
      }

      let items = [];
      let filteredItems = [];
      let activeIndex = -1;
      let selectedId = hiddenInput.value ? String(hiddenInput.value) : null;
      let isDisabled = Boolean(input.disabled);
      let messageState = {
        empty: messages?.empty ?? 'Sem opcoes disponiveis',
        noResults: messages?.noResults ?? 'Sem resultados',
      };

      hiddenInput.disabled = isDisabled;

      const resolveItemId = (item) => {
        if (typeof getId === 'function') {
          const result = getId(item);
          return result === null || result === undefined ? '' : String(result);
        }
        if (item && Object.prototype.hasOwnProperty.call(item, 'id')) {
          return String(item.id ?? '');
        }
        if (item && Object.prototype.hasOwnProperty.call(item, 'value')) {
          return String(item.value ?? '');
        }
        return '';
      };

      const resolveItemFormat = (item) => {
        if (typeof formatItem === 'function') {
          const formatted = formatItem(item);
          if (typeof formatted === 'string') {
            return { display: formatted, primary: formatted, secondary: '' };
          }
          return {
            display: formatted?.display ?? formatted?.primary ?? '',
            primary: formatted?.primary ?? formatted?.display ?? '',
            secondary: formatted?.secondary ?? '',
          };
        }
        const fallback = item ?? '';
        return {
          display: String(fallback),
          primary: String(fallback),
          secondary: '',
        };
      };

      const resolveSearchValues = (item) => {
        if (typeof getSearchValues === 'function') {
          const values = getSearchValues(item);
          if (Array.isArray(values)) {
            return values.filter(Boolean).map((value) => String(value));
          }
          if (values) {
            return [String(values)];
          }
        }
        const formatted = resolveItemFormat(item);
        return [formatted.display, formatted.primary, formatted.secondary].filter(Boolean);
      };

      const setMessages = (newMessages = {}) => {
        messageState = { ...messageState, ...newMessages };
      };

      const syncSelectionUI = () => {
        const optionElements = results.querySelectorAll('[data-combo-option]');
        optionElements.forEach((element) => {
          const { value } = element.dataset;
          const isSelected = value === (selectedId ?? '');
          element.setAttribute('aria-selected', isSelected ? 'true' : 'false');
          const checkIcon = element.querySelector('[data-combo-option-check]');
          if (checkIcon) {
            checkIcon.classList.toggle('hidden', !isSelected);
          }
        });
      };

      const updateActiveOption = (nextIndex) => {
        const optionElements = results.querySelectorAll('[data-combo-option]');
        if (!optionElements.length || nextIndex < 0) {
          optionElements.forEach((element) => element.classList.remove('bg-muted'));
          activeIndex = -1;
          input.removeAttribute('aria-activedescendant');
          return;
        }
        const clampedIndex = Math.max(0, Math.min(nextIndex, optionElements.length - 1));
        activeIndex = clampedIndex;
        optionElements.forEach((element, index) => {
          element.classList.toggle('bg-muted', index === clampedIndex);
        });
        const activeElement = optionElements[clampedIndex];
        if (activeElement) {
          const elementId = activeElement.id || `${idPrefix ?? input.id}-option-${String(activeElement.dataset.value ?? clampedIndex).replace(/[^a-zA-Z0-9_-]/g, '-')}`;
          if (!activeElement.id) {
            activeElement.id = elementId;
          }
          input.setAttribute('aria-activedescendant', elementId);
          activeElement.scrollIntoView({ block: 'nearest' });
        }
      };

      const isOpen = () => !dropdown.classList.contains('hidden');

      const open = () => {
        if (isDisabled) {
          return;
        }
        dropdown.classList.remove('hidden');
        dropdown.style.display = 'block';
        input.setAttribute('aria-expanded', 'true');
      };

      const close = () => {
        dropdown.classList.add('hidden');
        dropdown.style.display = 'none';
        input.setAttribute('aria-expanded', 'false');
        updateActiveOption(-1);
      };

      const filterItems = (query) => {
        const normalized = query.trim().toLowerCase();
        if (!normalized) {
          return [...items];
        }
        return items.filter((item) =>
          resolveSearchValues(item).some((value) => value.toLowerCase().includes(normalized)),
        );
      };

      const render = (list, query) => {
        results.innerHTML = '';
        filteredItems = list;
        updateActiveOption(-1);

        if (!list.length) {
          if (emptyState) {
            emptyState.classList.remove('hidden');
            emptyState.textContent = query.trim() ? messageState.noResults : messageState.empty;
          }
          return;
        }

        if (emptyState) {
          emptyState.classList.add('hidden');
        }

        list.forEach((item, index) => {
          const formatted = resolveItemFormat(item);
          const value = resolveItemId(item);
          const option = document.createElement('button');
          option.type = 'button';
          option.dataset.comboOption = 'true';
          option.dataset.value = value;
          option.dataset.index = String(index);
          option.setAttribute('role', 'option');
          option.className = 'flex w-full items-center justify-between gap-3 rounded-md px-4 py-2 text-left text-sm text-foreground transition-colors hover:bg-muted focus:bg-muted focus:outline-none';

          const labelWrapper = document.createElement('div');
          labelWrapper.className = 'flex flex-col';

          const primarySpan = document.createElement('span');
          primarySpan.className = 'font-medium';
          primarySpan.textContent = formatted.primary;
          labelWrapper.appendChild(primarySpan);

          if (formatted.secondary) {
            const secondarySpan = document.createElement('span');
            secondarySpan.className = 'text-xs text-muted-foreground';
            secondarySpan.textContent = formatted.secondary;
            labelWrapper.appendChild(secondarySpan);
          }

          option.appendChild(labelWrapper);

          const icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          icon.setAttribute('viewBox', '0 0 24 24');
          icon.setAttribute('width', '16');
          icon.setAttribute('height', '16');
          icon.classList.add('size-3.5', 'shrink-0', 'text-primary', 'hidden');
          icon.setAttribute('data-combo-option-check', 'true');

          const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
          polyline.setAttribute('points', '20 6 9 17 4 12');
          polyline.setAttribute('fill', 'none');
          polyline.setAttribute('stroke', 'currentColor');
          polyline.setAttribute('stroke-width', '2');
          polyline.setAttribute('stroke-linecap', 'round');
          polyline.setAttribute('stroke-linejoin', 'round');
          icon.appendChild(polyline);

          option.appendChild(icon);

          option.addEventListener('pointerdown', (event) => {
            event.preventDefault();
            selectItem(item);
            close();
          });

          results.appendChild(option);
        });

        syncSelectionUI();
      };

      const selectItem = (item, options = {}) => {
        const { emitChange = true, updateInput = true } = options;
        const previousValue = hiddenInput.value;

        if (!item) {
          if (!previousValue && selectedId === null) {
            if (!updateInput) {
              return;
            }
            if (!input.matches(':focus')) {
              input.value = '';
            }
            return;
          }
          selectedId = null;
          hiddenInput.value = '';
          if (updateInput) {
            if (!input.matches(':focus')) {
              input.value = '';
            }
          }
          syncSelectionUI();
          if (emitChange && previousValue !== hiddenInput.value) {
            hiddenInput.dispatchEvent(new Event('change'));
          }
          return;
        }

        const value = resolveItemId(item);
        selectedId = value;
        hiddenInput.value = value;
        if (updateInput) {
          const formatted = resolveItemFormat(item);
          input.value = formatted.display;
        }
        syncSelectionUI();
        if (emitChange && previousValue !== hiddenInput.value) {
          hiddenInput.dispatchEvent(new Event('change'));
        }
      };

      const clearSelection = (options = {}) => {
        const { emitChange = true, keepInput = false } = options;
        if (!hiddenInput.value && selectedId === null) {
          return;
        }
        const previousValue = hiddenInput.value;
        selectedId = null;
        hiddenInput.value = '';
        if (!keepInput) {
          input.value = '';
        }
        syncSelectionUI();
        if (emitChange && previousValue !== hiddenInput.value) {
          hiddenInput.dispatchEvent(new Event('change'));
        }
      };

      const setItems = (newItems, options = {}) => {
        items = Array.isArray(newItems) ? [...newItems] : [];
        if (options.emptyMessage) {
          messageState.empty = options.emptyMessage;
        }
        if (options.noResultsMessage) {
          messageState.noResults = options.noResultsMessage;
        }

        const query = input.matches(':focus') ? input.value : '';
        const list = query ? filterItems(query) : items;
        render(list, query);

        if (selectedId !== null) {
          const selectedItem = items.find((entry) => resolveItemId(entry) === selectedId);
          if (!selectedItem) {
            clearSelection({ emitChange: options.emitChangeOnClear ?? false, keepInput: false });
          } else if (!input.matches(':focus')) {
            const formatted = resolveItemFormat(selectedItem);
            input.value = formatted.display;
          }
        } else if (!input.matches(':focus') && !options.preserveInput) {
          input.value = '';
        }
      };

      const setDisabled = (state, options = {}) => {
        const { placeholder, clearValue = state, emitChangeOnClear = false, emptyMessage } = options;
        isDisabled = state;
        input.disabled = state;
        hiddenInput.disabled = state;
        if (typeof placeholder === 'string') {
          input.placeholder = placeholder;
        }
        if (typeof emptyMessage === 'string') {
          messageState.empty = emptyMessage;
        }
        if (state) {
          close();
          if (clearValue) {
            clearSelection({ emitChange: emitChangeOnClear, keepInput: false });
          }
        }
      };

      const setPlaceholder = (text) => {
        if (typeof text === 'string') {
          input.placeholder = text;
        }
      };

      const setSelectionById = (id, options = {}) => {
        if (id === null || id === undefined || id === '') {
          selectItem(null, options);
          return;
        }
        const target = items.find((entry) => resolveItemId(entry) === String(id));
        if (target) {
          selectItem(target, options);
        } else {
          selectItem(null, options);
        }
      };

      const getSelectedId = () => selectedId;

      const getSelectedItem = () => {
        if (selectedId === null) {
          return null;
        }
        return items.find((entry) => resolveItemId(entry) === selectedId) ?? null;
      };

      const handleFocus = () => {
        if (isDisabled) {
          return;
        }
        const query = input.value;
        const list = query ? filterItems(query) : items;
        render(list, query);
        if (list.length || query.trim()) {
          open();
        }
      };

      const handleInput = () => {
        if (isDisabled) {
          return;
        }
        const query = input.value;
        if (selectedId !== null) {
          clearSelection({ emitChange: true, keepInput: true });
        }
        const list = filterItems(query);
        render(list, query);
        open();
      };

      const handleKeyDown = (event) => {
        if (event.key === 'ArrowDown') {
          if (!isOpen()) {
            const query = input.value;
            const list = query ? filterItems(query) : items;
            render(list, query);
            if (list.length || query.trim()) {
              open();
            }
          }
          if (filteredItems.length) {
            event.preventDefault();
            const nextIndex = activeIndex < 0 ? 0 : Math.min(activeIndex + 1, filteredItems.length - 1);
            updateActiveOption(nextIndex);
          }
        } else if (event.key === 'ArrowUp') {
          if (!isOpen()) {
            const query = input.value;
            const list = query ? filterItems(query) : items;
            render(list, query);
            if (list.length || query.trim()) {
              open();
            }
          }
          if (filteredItems.length) {
            event.preventDefault();
            const nextIndex = activeIndex <= 0 ? filteredItems.length - 1 : activeIndex - 1;
            updateActiveOption(nextIndex);
          }
        } else if (event.key === 'Enter') {
          if (isOpen() && activeIndex >= 0 && filteredItems[activeIndex]) {
            event.preventDefault();
            selectItem(filteredItems[activeIndex]);
            close();
          }
        } else if (event.key === 'Escape') {
          if (isOpen()) {
            event.preventDefault();
            close();
          }
        }
      };

      const handleBlur = () => {
        window.setTimeout(() => {
          close();
        }, 120);
      };

      input.addEventListener('focus', handleFocus);
      input.addEventListener('input', handleInput);
      input.addEventListener('keydown', handleKeyDown);
      input.addEventListener('blur', handleBlur);

      const pointerDownHandler = (event) => {
        if (!isOpen()) {
          return;
        }
        if (box && event.target instanceof Node && box.contains(event.target)) {
          return;
        }
        if (dropdown && event.target instanceof Node && dropdown.contains(event.target)) {
          return;
        }
        close();
      };

      document.addEventListener('pointerdown', pointerDownHandler);

      return {
        setItems,
        clearSelection,
        setDisabled,
        setPlaceholder,
        setSelectionById,
        getSelectedId,
        getSelectedItem,
        setMessages,
      };
    };

    const managerCombo = createSearchCombo({
      input: managerSearchInput,
      hiddenInput: managerSelect,
      dropdown: managerSearchDropdown,
      results: managerSearchResults,
      emptyState: managerSearchEmpty,
      box: managerSearchBox,
      idPrefix: 'manager',
      messages: {
        empty: 'A carregar managers...',
        noResults: 'Sem resultados',
      },
      getId: (entry) => (entry?.manager?.id != null ? String(entry.manager.id) : ''),
      formatItem: (entry) => ({
        display: formatManagerLabel(entry),
        primary: entry?.manager?.name ?? '',
        secondary: entry?.manager?.email ?? '',
      }),
      getSearchValues: (entry) => [
        entry?.manager?.name ?? '',
        entry?.manager?.email ?? '',
      ],
    });

    const engagementCombo = createSearchCombo({
      input: engagementSearchInput,
      hiddenInput: engagementSelect,
      dropdown: engagementSearchDropdown,
      results: engagementSearchResults,
      emptyState: engagementSearchEmpty,
      box: engagementSearchBox,
      idPrefix: 'engagement',
      messages: {
        empty: 'Seleciona o manager primeiro',
        noResults: 'Sem resultados',
      },
      getId: (engagement) => (engagement?.id != null ? String(engagement.id) : ''),
      formatItem: (engagement) => {
        const code = engagement?.engagement_code ? `[${engagement.engagement_code}] ` : '';
        const label = engagement?.engagement_name ?? '';
        return {
          display: `${code}${label}`.trim(),
          primary: `${code}${label}`.trim(),
        };
      },
      getSearchValues: (engagement) => [
        engagement?.engagement_name ?? '',
        engagement?.engagement_code ?? '',
      ],
    });

    const taskCombo = createSearchCombo({
      input: taskSearchInput,
      hiddenInput: taskSelect,
      dropdown: taskSearchDropdown,
      results: taskSearchResults,
      emptyState: taskSearchEmpty,
      box: taskSearchBox,
      idPrefix: 'task',
      messages: {
        empty: 'Seleciona o engagement primeiro',
        noResults: 'Sem resultados',
      },
      getId: (task) => (task?.id != null ? String(task.id) : ''),
      formatItem: (task) => ({
        display: task?.label ?? '',
        primary: task?.label ?? '',
      }),
      getSearchValues: (task) => [task?.label ?? ''],
    });

    const deliverableCombo = createSearchCombo({
      input: deliverableSearchInput,
      hiddenInput: deliverableSelect,
      dropdown: deliverableSearchDropdown,
      results: deliverableSearchResults,
      emptyState: deliverableSearchEmpty,
      box: deliverableSearchBox,
      idPrefix: 'deliverable',
      messages: {
        empty: 'Seleciona o engagement primeiro',
        noResults: 'Sem resultados',
      },
      getId: (deliverable) => (deliverable?.id != null ? String(deliverable.id) : ''),
      formatItem: (deliverable) => ({
        display: deliverable?.label ?? '',
        primary: deliverable?.label ?? '',
      }),
      getSearchValues: (deliverable) => [deliverable?.label ?? ''],
    });

    const periodicityCombo = createSearchCombo({
      input: periodicitySearchInput,
      hiddenInput: periodicitySelect,
      dropdown: periodicitySearchDropdown,
      results: periodicitySearchResults,
      emptyState: periodicitySearchEmpty,
      box: periodicitySearchBox,
      idPrefix: 'periodicity',
      messages: {
        empty: 'Seleciona um deliverable primeiro',
        noResults: 'Sem resultados',
      },
      getId: (item) => item?.value ?? '',
      formatItem: (item) => ({
        display: item?.label ?? '',
        primary: item?.label ?? '',
      }),
      getSearchValues: (item) => [item?.label ?? '', item?.value ?? ''],
    });

    const setEngagementIdleState = (message = 'Seleciona o manager primeiro', options = {}) => {
      const { emitChange = false } = options;
      engagementCombo.setItems([], { emptyMessage: message });
      engagementCombo.setDisabled(true, {
        placeholder: message,
        emptyMessage: message,
        clearValue: true,
        emitChangeOnClear: emitChange,
      });
    };

    const setTaskIdleState = (message = 'Seleciona o engagement primeiro', options = {}) => {
      const { emitChange = false } = options;
      taskCombo.setItems([], { emptyMessage: message });
      taskCombo.setDisabled(true, {
        placeholder: message,
        emptyMessage: message,
        clearValue: true,
        emitChangeOnClear: emitChange,
      });
    };

    const setDeliverableIdleState = (message = 'Seleciona o engagement primeiro', options = {}) => {
      const { emitChange = false } = options;
      deliverableCombo.setItems([], { emptyMessage: message });
      deliverableCombo.setDisabled(true, {
        placeholder: message,
        emptyMessage: message,
        clearValue: true,
        emitChangeOnClear: emitChange,
      });
    };

    const setPeriodicityIdleState = (message = 'Seleciona um deliverable primeiro', options = {}) => {
      const { emitChange = false } = options;
      periodicityCombo.setItems([], { emptyMessage: message });
      periodicityCombo.setDisabled(true, {
        placeholder: message,
        emptyMessage: message,
        clearValue: true,
        emitChangeOnClear: emitChange,
      });
    };

    setEngagementIdleState();
    setTaskIdleState();
    setDeliverableIdleState();
    setPeriodicityIdleState();

    const populateManagers = () => {
      if (!managerData.length) {
        managerCombo.setItems([], { emptyMessage: 'Sem managers disponiveis' });
        managerCombo.setDisabled(true, {
          placeholder: 'Sem managers disponiveis',
          emptyMessage: 'Sem managers disponiveis',
          clearValue: true,
          emitChangeOnClear: true,
        });
        setEngagementIdleState('Sem managers disponiveis');
        setTaskIdleState('Sem managers disponiveis');
        setDeliverableIdleState('Sem managers disponiveis');
        setPeriodicityIdleState('Sem deliverables configurados');
        return;
      }
      managerCombo.setItems(managerData, { emptyMessage: 'Sem managers disponiveis' });
      managerCombo.setDisabled(false, { placeholder: 'Seleciona o manager', clearValue: false });
      setEngagementIdleState('Seleciona o manager primeiro');
      setTaskIdleState('Seleciona o engagement primeiro');
      setDeliverableIdleState('Seleciona o engagement primeiro');
      setPeriodicityIdleState('Seleciona um deliverable primeiro');
      const currentValue = managerSelect.value;
      if (currentValue) {
        managerCombo.setSelectionById(currentValue, { emitChange: false, updateInput: !managerSearchInput?.matches(':focus') });
      } else if (!managerSearchInput?.matches(':focus')) {
        managerSearchInput.value = '';
      }
    };

    const populateEngagements = (engagements) => {
      const list = Array.isArray(engagements) ? engagements : [];
      engagementCombo.clearSelection({ emitChange: true });
      if (!list.length) {
        engagementCombo.setItems([], { emptyMessage: 'Sem engagements configurados' });
        engagementCombo.setDisabled(true, {
          placeholder: 'Sem engagements configurados',
          emptyMessage: 'Sem engagements configurados',
          clearValue: false,
        });
        return;
      }
      engagementCombo.setItems(list, { emptyMessage: 'Sem engagements configurados' });
      engagementCombo.setDisabled(false, { placeholder: 'Seleciona o engagement', clearValue: false });
    };

    const populateTasks = (tasks) => {
      const list = Array.isArray(tasks) ? tasks : [];
      taskCombo.clearSelection({ emitChange: true });
      if (!list.length) {
        taskCombo.setItems([], { emptyMessage: 'Sem tarefas configuradas' });
        taskCombo.setDisabled(true, {
          placeholder: 'Sem tarefas configuradas',
          emptyMessage: 'Sem tarefas configuradas',
          clearValue: false,
        });
        return;
      }
      taskCombo.setItems(list, { emptyMessage: 'Sem tarefas configuradas' });
      taskCombo.setDisabled(false, { placeholder: 'Seleciona a tarefa', clearValue: false });
    };

    const populateDeliverables = (deliverables) => {
      const list = Array.isArray(deliverables) ? deliverables : [];
      deliverableCombo.clearSelection({ emitChange: true });
      if (!list.length) {
        deliverableCombo.setItems([], { emptyMessage: 'Sem deliverables configurados' });
        deliverableCombo.setDisabled(true, {
          placeholder: 'Sem deliverables configurados',
          emptyMessage: 'Sem deliverables configurados',
          clearValue: false,
        });
        return;
      }
      deliverableCombo.setItems(list, { emptyMessage: 'Sem deliverables configurados' });
      deliverableCombo.setDisabled(false, { placeholder: 'Seleciona o deliverable', clearValue: false });
    };

    const updatePeriodicityForDeliverable = (deliverable) => {
      if (!periodicitySelect) {
        return;
      }

      if (!deliverable) {
        setPeriodicityIdleState('Seleciona o deliverable', { emitChange: true });
        return;
      }

      const periodicity = deliverable.periodicity ?? '';
      if (periodicity && periodicityLabelMap[periodicity]) {
        periodicityCombo.setItems(
          [{ value: periodicity, label: periodicityLabelMap[periodicity] }],
          { emptyMessage: 'Periodicidade definida pelo manager' },
        );
        periodicityCombo.setDisabled(true, {
          placeholder: 'Periodicidade definida pelo manager',
          emptyMessage: 'Periodicidade definida pelo manager',
          clearValue: false,
        });
        periodicityCombo.setSelectionById(periodicity, { emitChange: true, updateInput: true });
      } else {
        periodicityCombo.setItems(periodicityOptions, { emptyMessage: 'Sem periodicidade configurada' });
        periodicityCombo.setDisabled(false, { placeholder: 'Seleciona a periodicidade', clearValue: false });
        periodicityCombo.clearSelection({ emitChange: true });
      }
    };

    let managerData = [];
    const progressFields = {
      user: document.getElementById('progress-user'),
      manager: document.getElementById('progress-manager'),
      engagement: document.getElementById('progress-engagement'),
      task: document.getElementById('progress-task'),
      deliverable: document.getElementById('progress-deliverable'),
      review: document.getElementById('progress-review'),
      start: document.getElementById('progress-start'),
    };

    let activeActivityId = null;
    let activityStartTimestamp = null;
    let timerInterval = null;

    const clearError = () => {
      activityError.classList.add('hidden');
      activityError.textContent = '';
    };

    const showError = (message) => {
      activityError.textContent = message;
      activityError.classList.remove('hidden');
    };

    const resetTimer = () => {
      if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
      }
      timerDisplay.textContent = '00:00';
    };

    const updateTimerDisplay = () => {
      if (!activityStartTimestamp) {
        timerDisplay.textContent = '00:00';
        return;
      }
      const elapsedSeconds = Math.max(0, Math.floor((Date.now() - activityStartTimestamp) / 1000));
      const minutes = Math.floor(elapsedSeconds / 60);
      const seconds = elapsedSeconds % 60;
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      const formatted = hours > 0
        ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
        : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
      timerDisplay.textContent = formatted;
    };

    const startTimer = () => {
      resetTimer();
      updateTimerDisplay();
      timerInterval = setInterval(updateTimerDisplay, 1000);
    };

    const formatLisbon = (isoString) => {
      const date = new Date(isoString);
      return date.toLocaleString('pt-PT', {
        timeZone: 'Europe/Lisbon',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      });
    };

    const getPeriodicityLabel = (value) => {
      if (!value) {
        return '';
      }
      return periodicityLabelMap[value] ?? value;
    };

    managerSelect.addEventListener('change', () => {
      const managerId = Number.parseInt(managerSelect.value, 10);

      if (!Number.isFinite(managerId)) {
        setEngagementIdleState('Seleciona o manager primeiro', { emitChange: true });
        setTaskIdleState('Seleciona o engagement primeiro', { emitChange: true });
        setDeliverableIdleState('Seleciona o engagement primeiro', { emitChange: true });
        setPeriodicityIdleState('Seleciona um deliverable primeiro', { emitChange: true });
        return;
      }

      setEngagementIdleState('Seleciona o engagement', { emitChange: true });
      setTaskIdleState('Seleciona o engagement primeiro', { emitChange: true });
      setDeliverableIdleState('Seleciona o engagement primeiro', { emitChange: true });
      setPeriodicityIdleState('Seleciona um deliverable primeiro', { emitChange: true });

      const entry = managerData.find((item) => item.manager.id === managerId);
      if (!entry) {
        return;
      }

      managerCombo.setSelectionById(managerId, {
        emitChange: false,
        updateInput: !managerSearchInput?.matches(':focus'),
      });

      populateEngagements(entry.engagements ?? []);
    });

    engagementSelect.addEventListener('change', () => {
      const selection = getSelectedEngagement();
      if (!selection) {
        setTaskIdleState('Seleciona o engagement primeiro', { emitChange: true });
        setDeliverableIdleState('Seleciona o engagement primeiro', { emitChange: true });
        setPeriodicityIdleState('Seleciona um deliverable primeiro', { emitChange: true });
        return;
      }

      setTaskIdleState('Seleciona a tarefa', { emitChange: true });
      setDeliverableIdleState('Seleciona o deliverable', { emitChange: true });
      setPeriodicityIdleState('Seleciona o deliverable', { emitChange: true });

      const { engagement } = selection;
      populateTasks(engagement.tasks ?? []);
      populateDeliverables(engagement.deliverables ?? []);
    });

    deliverableSelect.addEventListener('change', () => {
      const selection = getSelectedEngagement();
      if (!selection) {
        setPeriodicityIdleState('Seleciona um deliverable primeiro', { emitChange: true });
        return;
      }
      const deliverableId = Number.parseInt(deliverableSelect.value, 10);
      if (!Number.isFinite(deliverableId)) {
        setPeriodicityIdleState('Seleciona o deliverable', { emitChange: true });
        return;
      }
      const deliverable = selection.engagement.deliverables?.find((item) => item.id === deliverableId) ?? null;
      updatePeriodicityForDeliverable(deliverable ?? null);
    });

    const setActivityState = (isActive) => {
      availabilityTargets.forEach((element) => {
        element.classList.toggle('pointer-events-none', isActive);
        element.classList.toggle('opacity-50', isActive);
        if (isActive) {
          element.setAttribute('aria-disabled', 'true');
        } else {
          element.removeAttribute('aria-disabled');
        }
      });
      if (inProgressIndicator) {
        inProgressIndicator.classList.toggle('animate-pulse', isActive);
      }
      if (inProgressIndicatorDot) {
        inProgressIndicatorDot.classList.toggle('animate-ping', isActive);
      }
    };

    const applyActiveActivity = (activity, options = {}) => {
      if (!activity) {
        resetTimer();
        activeActivityId = null;
        activityStartTimestamp = null;
        inProgressSection.classList.add('hidden');
        setActivityState(false);
        setPeriodicityIdleState('Seleciona um deliverable primeiro', { emitChange: true });
        reviewTargetWrapper.classList.add('hidden');
        reviewCheckbox.checked = false;
        progressFields.user.textContent = 'Nao indicado';
        progressFields.manager.textContent = 'Nao indicado';
        progressFields.engagement.textContent = 'Nao indicado';
        progressFields.task.textContent = 'Nao selecionado';
        progressFields.deliverable.textContent = 'Nao selecionado';
        progressFields.review.textContent = 'Nao';
        progressFields.start.textContent = '';
        return;
      }

      const overrides = options.overrides ?? {};
      const resetForm = Boolean(options.resetForm);

      activeActivityId = activity.id ?? null;
      const parsedStartedAt = activity.started_at ? Date.parse(activity.started_at) : NaN;
      activityStartTimestamp = Number.isFinite(parsedStartedAt) ? parsedStartedAt : Date.now();

      stopMessage.classList.add('hidden');
      clearError();

      const defaultUserSummary = activity.user_name && activity.user_email
        ? `${activity.user_name} (${activity.user_email})`
        : (userName && userEmail ? `${userName} (${userEmail})` : 'Nao indicado');
      const managerSummary = overrides.manager ?? (
        activity.manager_name
          ? `${activity.manager_name}${activity.manager_email ? ` (${activity.manager_email})` : ''}`
          : 'Nao indicado'
      );
      const engagementSummary = overrides.engagement ?? (
        activity.engagement
          ? `${activity.engagement_code ? `[${activity.engagement_code}] ` : ''}${activity.engagement}`
          : 'Nao indicado'
      );
      const taskSummary = overrides.task ?? (activity.process ?? 'Nao selecionado');
      const deliverableSummary = overrides.deliverable ?? (activity.deliverable ?? 'Nao selecionado');
      const reviewSummary = overrides.review ?? (
        activity.is_review
          ? `Sim (${activity.review_target === 'GDS' ? 'GDS' : 'Staff'})`
          : 'Nao'
      );
      const startedText = activity.started_at ? formatLisbon(activity.started_at) : '';

      progressFields.user.textContent = overrides.user ?? defaultUserSummary;
      progressFields.manager.textContent = managerSummary;
      progressFields.engagement.textContent = engagementSummary;
      progressFields.task.textContent = taskSummary;
      progressFields.deliverable.textContent = deliverableSummary;
      progressFields.review.textContent = reviewSummary;
      progressFields.start.textContent = startedText;

      inProgressSection.classList.remove('hidden');
      setActivityState(true);
      updatePeriodicityForDeliverable(null);

      if (resetForm) {
        activityForm.reset();
        managerSelect.dispatchEvent(new Event('change'));
        reviewTargetWrapper.classList.add('hidden');
        reviewCheckbox.checked = false;
      }

      startTimer();
    };

    const fetchActiveActivity = async () => {
      try {
        const response = await fetch('/api/activities/current');
        if (!response.ok) {
          return;
        }
        const payload = await response.json();
        if (payload?.success) {
          applyActiveActivity(payload.activity ?? null);
        }
      } catch (error) {
        console.error('Failed to load current activity', error);
      }
    };

    const getSelectedEngagement = () => {
      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        return null;
      }
      const managerEntry = managerData.find((item) => item.manager.id === managerId);
      if (!managerEntry) {
        return null;
      }
      const engagement = managerEntry.engagements.find((item) => item.id === engagementId);
      if (!engagement) {
        return null;
      }
      return { managerEntry, engagement };
    };

    setPeriodicityIdleState();
    setActivityState(false);

    reviewCheckbox.addEventListener('change', () => {
      if (reviewCheckbox.checked) {
        reviewTargetWrapper.classList.remove('hidden');
      } else {
        reviewTargetWrapper.classList.add('hidden');
        const checked = reviewTargetWrapper.querySelector('input[name="review-target"]:checked');
        if (checked) {
          checked.checked = false;
        }
      }
    });

    const loadOptions = async () => {
      try {
        const response = await fetch('/api/engagements/options');
        const payload = await response.json();
        if (!response.ok || !payload?.success) {
          throw new Error(payload?.message || 'Não foi possível carregar as op��es.');
        }
        managerData = payload.managers ?? [];
        populateManagers();
        setPeriodicityIdleState('Seleciona um deliverable primeiro');
        clearError();
      } catch (error) {
        managerData = [];
        populateManagers();
        setPeriodicityIdleState('Sem deliverables configurados');
        showError(error instanceof Error ? error.message : 'Não foi possível carregar os managers.');
      }
    };

    loadOptions();
    fetchActiveActivity();

    activityForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      clearError();
      stopMessage.classList.add('hidden');

      if (activeActivityId) {
        showError('Termina ou pausa a atividade em curso antes de iniciar uma nova.');
        return;
      }

      if (!userName || !userEmail) {
        showError('Não foi possível validar o utilizador. Termina sessão e volta a entrar.');
        return;
      }

      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      const taskId = taskSelect.disabled || !taskSelect.value ? null : Number.parseInt(taskSelect.value, 10);
      const deliverableId = deliverableSelect.disabled || !deliverableSelect.value ? null : Number.parseInt(deliverableSelect.value, 10);
      const periodicityValueRaw = periodicitySelect ? periodicitySelect.value.trim() : '';
      const periodicityRequired = deliverableId !== null && periodicitySelect && !periodicitySelect.disabled;
      const isReview = reviewCheckbox.checked;
      const reviewTargetRadio = reviewCheckbox.checked
        ? reviewTargetWrapper.querySelector('input[name="review-target"]:checked')
        : null;
      const reviewTarget = reviewTargetRadio ? reviewTargetRadio.value : null;

      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        showError('Seleciona o manager e o engagement.');
        return;
      }

      if (periodicityRequired && !periodicityValueRaw) {
        showError('Seleciona a periodicidade do deliverable.');
        return;
      }

      if (isReview && !reviewTarget) {
        showError('Seleciona se a revis�o � a outro staff ou ao trabalho do GDS.');
        return;
      }

      const selection = getSelectedEngagement();
      if (!selection) {
        showError('Seleciona o manager e o engagement.');
        return;
      }

      const { managerEntry, engagement } = selection;
      const taskEntry = engagement.tasks?.find((item) => item.id === taskId) ?? null;
      const deliverableEntry = engagement.deliverables?.find((item) => item.id === deliverableId) ?? null;

      try {
        const response = await fetch('/api/activities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            managerId,
            engagementId,
            taskId,
            deliverableId,
            isReview,
            reviewTarget,
          }),
        });
        const result = await response.json();
        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível iniciar a atividade.');
        }

        const { activity } = result;

        const periodicityValueResolved = periodicityValueRaw || (deliverableEntry?.periodicity ?? '');
        const periodicityLabel = getPeriodicityLabel(periodicityValueResolved);
        const deliverableLabel = deliverableEntry?.label ?? 'Nao selecionado';
        const deliverableDisplay = periodicityLabel && deliverableEntry
          ? `${deliverableLabel} (${periodicityLabel})`
          : deliverableEntry
            ? deliverableLabel
            : 'Nao selecionado';

        const hydratedActivity = {
          ...activity,
          user_name: userName,
          user_email: userEmail,
          manager_name: managerEntry?.manager.name ?? null,
          manager_email: managerEntry?.manager.email ?? null,
          engagement: engagement?.engagement_name ?? null,
          engagement_code: engagement?.engagement_code ?? null,
          process: taskEntry?.label ?? null,
          deliverable: deliverableDisplay,
          is_review: isReview,
          review_target: reviewTarget ?? null,
        };

        applyActiveActivity(hydratedActivity, { resetForm: true });
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível iniciar a atividade.');
      }
    });

    document.getElementById('stop-button').addEventListener('click', async () => {
      if (!activeActivityId) {
        return;
      }
      stopMessage.classList.add('hidden');
      clearError();

      try {
        const response = await fetch(`/api/activities/${activeActivityId}`, {
          method: 'PATCH',
        });
        const result = await response.json();

        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível terminar a atividade.');
        }

        applyActiveActivity(null);

        const endedAt = result.activity.ended_at;
        const durationSeconds = result.activity.duration_seconds;

        const minutes = Math.floor(durationSeconds / 60);
        const seconds = durationSeconds % 60;
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        const formattedDuration = hours > 0
          ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
          : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        stopMessage.textContent = `Atividade conclu�da �s ${formatLisbon(endedAt)} (dura��o: ${formattedDuration}).`;
        stopMessage.classList.remove('hidden');
        setTimeout(() => stopMessage.classList.add('hidden'), 4000);
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível terminar a atividade.');
      }
    });
  </script>
  </div>
</Layout>



