---
import Layout from "@/layouts/Layout.astro";
import { buttonVariants } from "@/components/ui/button";
import { Label } from "@/components/ui/label";

const user = Astro.locals.user ?? { name: "", email: "" };
---

<Layout title="O Meu Trabalho">
  <div
    id="activity-page"
    data-user-name={user.name ?? ""}
    data-user-email={user.email ?? ""}
  >
    <div class="grid gap-8 lg:grid-cols-[minmax(0,2.25fr)_minmax(0,1fr)] xl:gap-12">
      <section id="start-form-section" data-activity-card="form" class="rounded-xl border bg-card p-6 shadow space-y-6">
        <div>
          <h2 class="text-xl font-semibold">Iniciar atividade</h2>
          <p class="text-sm text-muted-foreground">Seleciona o manager, engagement e tarefa que vais executar.</p>
        </div>
        <form id="activity-form" class="space-y-4">
          <div class="space-y-2">
            <Label htmlFor="manager-search-input">Manager</Label>
            <div
              id="manager-searchbox"
              class="relative"
              data-hs-combo-box='{"groupingType":"default","isOpenOnFocus":true}'
            >
              <div class="relative">
                <div class="pointer-events-none absolute inset-y-0 start-0 z-20 flex items-center ps-3.5">
                  <svg
                    class="size-4 shrink-0 text-muted-foreground"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <circle cx="11" cy="11" r="8" />
                    <path d="m21 21-4.3-4.3" />
                  </svg>
                </div>
                <input
                  id="manager-search-input"
                  class="block w-full rounded-lg border border-input bg-background py-2.5 ps-10 pe-4 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text"
                  role="combobox"
                  aria-expanded="false"
                  aria-controls="manager-search-results"
                  placeholder="A carregar managers..."
                  autocomplete="off"
                  data-hs-combo-box-input
                  disabled
                  required
                />
              </div>
              <div
                id="manager-search-dropdown"
                class="absolute z-50 mt-1 hidden w-full rounded-lg border border-input bg-card shadow"
                data-hs-combo-box-output
              >
                <div
                  id="manager-search-results"
                  class="max-h-64 overflow-y-auto rounded-b-lg [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-muted [&::-webkit-scrollbar-thumb]:bg-muted-foreground/50"
                  role="listbox"
                  data-hs-combo-box-output-items-wrapper
                ></div>
                <div
                  id="manager-search-empty"
                  class="hidden px-4 py-6 text-center text-sm text-muted-foreground"
                  data-manager-empty
                >
                  Sem resultados
                </div>
              </div>
              <input type="hidden" id="manager-select" name="manager" />
            </div>
          </div>
  
          <div class="space-y-2">
            <Label htmlFor="engagement-select">Engagement</Label>
            <select
              id="engagement-select"
              class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              required
              disabled
            >
              <option value="">Seleciona um manager primeiro</option>
            </select>
          </div>
  
          <div class="grid gap-4 md:grid-cols-2">
            <div class="space-y-2">
              <Label htmlFor="task-select">Tarefa</Label>
              <select
                id="task-select"
                class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                disabled
              >
                <option value="">Seleciona um engagement primeiro</option>
              </select>
            </div>
            <div class="space-y-2">
              <Label htmlFor="deliverable-select">Deliverable</Label>
              <select
                id="deliverable-select"
                class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                disabled
              >
                <option value="">Seleciona um engagement primeiro</option>
              </select>
            </div>
          </div>
  
          <div class="space-y-2">
            <Label htmlFor="deliverable-periodicity">Periodicidade</Label>
            <select
              id="deliverable-periodicity"
              class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              disabled
            >
              <option value="">Seleciona um deliverable primeiro</option>
            </select>
          </div>
  
          <div class="space-y-2">
            <div class="flex items-center gap-2">
              <input type="checkbox" id="is-review" class="h-4 w-4 rounded border border-input" />
              <Label htmlFor="is-review" class="text-sm font-medium">Revisão de trabalho realizado</Label>
            </div>
            <div id="review-target-wrapper" class="hidden ml-6 space-y-2">
              <p class="text-sm text-muted-foreground">Indica o alvo da revisão:</p>
              <div class="flex flex-col gap-2">
                <label class="inline-flex items-center gap-2 text-sm">
                  <input type="radio" name="review-target" value="Staff" class="h-4 w-4 border-input" />
                  Outro staff
                </label>
                <label class="inline-flex items-center gap-2 text-sm">
                  <input type="radio" name="review-target" value="GDS" class="h-4 w-4 border-input" />
                  Trabalho do GDS
                </label>
              </div>
            </div>
          </div>
  
          <button type="submit" class={buttonVariants({ size: "lg" })}>
            Iniciar atividade
          </button>
          <p id="activity-error" class="text-sm text-red-600 hidden"></p>
        </form>
      </section>
  
      <div class="space-y-6">
        <section
          id="in-progress"
          data-activity-card="active"
          class="hidden space-y-4 rounded-xl border bg-card p-6 shadow transition-all"
        >
          <div class="flex flex-col gap-3">
            <div class="flex items-start justify-between gap-4">
              <div class="flex items-center gap-3">
                <span
                  id="in-progress-indicator"
                  class="inline-flex items-center gap-2 rounded-full border border-emerald-200 bg-emerald-50 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-emerald-700"
                >
                  <span class="h-2 w-2 rounded-full bg-emerald-500"></span>
                  EM CURSO
                </span>
                <h2 class="text-xl font-semibold">Atividade em curso</h2>
              </div>
              <span id="timer" class="text-3xl font-bold">00:00</span>
            </div>
            <p class="text-sm text-muted-foreground">Mantém este separador aberto enquanto trabalhas.</p>
          </div>
  
          <dl class="grid gap-4 md:grid-cols-2 text-sm">
            <div>
              <dt class="font-medium text-muted-foreground">Colaborador</dt>
              <dd id="progress-user"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Manager</dt>
              <dd id="progress-manager"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Engagement</dt>
              <dd id="progress-engagement"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Tarefa</dt>
              <dd id="progress-task"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Deliverable</dt>
              <dd id="progress-deliverable"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Revisão</dt>
              <dd id="progress-review"></dd>
            </div>
            <div>
              <dt class="font-medium text-muted-foreground">Início</dt>
              <dd id="progress-start"></dd>
            </div>
          </dl>
  
        <button id="stop-button" class={buttonVariants({ size: "lg", variant: "destructive" })}>
          Parar atividade
        </button>
        <p id="stop-message" class="text-sm text-green-600 hidden"></p>
      </section>
  
      <section
        id="start-card"
        data-activity-card="start"
        class="rounded-xl border bg-card p-6 shadow-sm transition-opacity"
      >
        <div class="space-y-2">
          <h2 class="text-lg font-semibold">Iniciar atividade</h2>
          <p class="text-sm text-muted-foreground">Preenche o formulário para começares um novo trabalho.</p>
        </div>
      </section>
  
      <section
        id="resume-card"
        data-activity-card="resume"
        class="rounded-xl border bg-card p-6 shadow-sm transition-opacity"
      >
        <div class="space-y-2">
          <h2 class="text-lg font-semibold">Retomar atividade</h2>
          <p class="text-sm text-muted-foreground">Vê aqui as atividades pausadas e retoma quando quiseres.</p>
        </div>
        <div id="resume-content" class="space-y-3 text-sm text-muted-foreground">
          <p>Não tens atividades pausadas.</p>
        </div>
      </section>
      </div>
    </div>
  
  
  <script is:inline>
    const root = document.getElementById('activity-page');
    const userName = root?.dataset?.userName ?? '';
    const userEmail = root?.dataset?.userEmail ?? '';

    const activityForm = document.getElementById('activity-form');
    const inProgressSection = document.getElementById('in-progress');
    const activityError = document.getElementById('activity-error');
    const stopMessage = document.getElementById('stop-message');
    const timerDisplay = document.getElementById('timer');

    const managerSelect = document.getElementById('manager-select');
    const managerSearchInput = document.getElementById('manager-search-input');
    const managerSearchDropdown = document.getElementById('manager-search-dropdown');
    const managerSearchResults = document.getElementById('manager-search-results');
    const managerSearchEmpty = document.getElementById('manager-search-empty');
    const managerSearchBox = document.getElementById('manager-searchbox');
    const engagementSelect = document.getElementById('engagement-select');
    const taskSelect = document.getElementById('task-select');
    const deliverableSelect = document.getElementById('deliverable-select');
    const periodicitySelect = document.getElementById('deliverable-periodicity');
    const reviewCheckbox = document.getElementById('is-review');
    const reviewTargetWrapper = document.getElementById('review-target-wrapper');
    const startSection = document.getElementById('start-form-section');
    const startCard = document.getElementById('start-card');
    const resumeCard = document.getElementById('resume-card');
    const inProgressIndicator = document.getElementById('in-progress-indicator');
    const inProgressIndicatorDot = inProgressIndicator ? inProgressIndicator.querySelector('span') : null;

    const periodicityOptions = [
      { value: 'daily', label: 'Diariamente' },
      { value: 'weekly', label: 'Semanalmente' },
      { value: 'monthly', label: 'Mensalmente' },
      { value: 'bimonthly', label: 'Bimensalmente' },
      { value: 'quarterly', label: 'Trimestralmente' },
      { value: 'semiannual', label: 'Semestralmente' },
      { value: 'annual', label: 'Anualmente' },
      { value: 'not_applicable', label: 'Não aplicável' },
    ];
    const periodicityLabelMap = periodicityOptions.reduce((accumulator, option) => {
      accumulator[option.value] = option.label;
      return accumulator;
    }, {});
    const availabilityTargets = [startSection, startCard, resumeCard].filter(Boolean);

    function formatManagerLabel(entry) {
      if (!entry) {
        return '';
      }
      const name = entry.manager?.name ?? '';
      const email = entry.manager?.email ?? '';
      if (name && email) {
        return `${name} (${email})`;
      }
      return name || email;
    }

    function filterManagers(query) {
      if (!query) {
        return managerData;
      }
      const normalizedQuery = query.trim().toLowerCase();
      if (!normalizedQuery) {
        return managerData;
      }
      return managerData.filter((item) => {
        const name = item.manager?.name?.toLowerCase() ?? '';
        const email = item.manager?.email?.toLowerCase() ?? '';
        return name.includes(normalizedQuery) || email.includes(normalizedQuery);
      });
    }

    function syncManagerSelectionUI() {
      if (!managerSearchResults) {
        return;
      }
      const optionElements = managerSearchResults.querySelectorAll('[data-manager-option]');
      optionElements.forEach((optionElement) => {
        const rawValue = optionElement.dataset.value ?? '';
        const optionId = Number.parseInt(rawValue, 10);
        const isSelected = Number.isFinite(optionId) && optionId === managerSelectedId;
        optionElement.setAttribute('aria-selected', isSelected ? 'true' : 'false');
        const checkIcon = optionElement.querySelector('[data-manager-option-check]');
        if (checkIcon) {
          checkIcon.classList.toggle('hidden', !isSelected);
        }
      });
    }

    function updateManagerActiveOption(nextIndex) {
      if (!managerSearchResults) {
        managerActiveIndex = -1;
        return;
      }
      const optionElements = managerSearchResults.querySelectorAll('[data-manager-option]');
      if (!optionElements.length || nextIndex < 0) {
        optionElements.forEach((element) => element.classList.remove('bg-muted'));
        managerActiveIndex = -1;
        if (managerSearchInput) {
          managerSearchInput.removeAttribute('aria-activedescendant');
        }
        return;
      }
      const clampedIndex = Math.max(0, Math.min(nextIndex, optionElements.length - 1));
      managerActiveIndex = clampedIndex;
      optionElements.forEach((element, index) => {
        element.classList.toggle('bg-muted', index === clampedIndex);
      });
      const activeOption = optionElements[clampedIndex];
      if (activeOption && managerSearchInput) {
        managerSearchInput.setAttribute('aria-activedescendant', activeOption.id);
        activeOption.scrollIntoView({ block: 'nearest' });
      }
    }

    function isManagerDropdownOpen() {
      return Boolean(managerSearchDropdown) && !managerSearchDropdown.classList.contains('hidden');
    }

    function openManagerDropdown() {
      if (!managerSearchDropdown || !managerSearchInput || managerSearchInput.disabled) {
        return;
      }
      managerSearchDropdown.classList.remove('hidden');
      managerSearchDropdown.style.display = 'block';
      managerSearchInput.setAttribute('aria-expanded', 'true');
    }

    function closeManagerDropdown() {
      if (!managerSearchDropdown || !managerSearchInput) {
        return;
      }
      managerSearchDropdown.classList.add('hidden');
      managerSearchDropdown.style.display = 'none';
      managerSearchInput.setAttribute('aria-expanded', 'false');
      updateManagerActiveOption(-1);
    }

    function setManagerSelection(entry, emitChange = true) {
      const previousValue = managerSelect ? managerSelect.value : '';
      managerSelectedId = entry ? entry.manager.id : null;

      if (managerSearchInput) {
        if (entry) {
          managerSearchInput.value = formatManagerLabel(entry);
        } else if (!managerSearchInput.matches(':focus')) {
          managerSearchInput.value = '';
        }
      }

      if (managerSelect) {
        managerSelect.value = entry ? String(entry.manager.id) : '';
      }

      syncManagerSelectionUI();

      if (emitChange && managerSelect && previousValue !== managerSelect.value) {
        managerSelect.dispatchEvent(new Event('change'));
      }
    }

    function renderManagerResults(entries, query = '') {
      if (!managerSearchResults || !managerSearchEmpty) {
        managerFilteredEntries = entries;
        managerActiveIndex = -1;
        return;
      }
      managerSearchResults.innerHTML = '';
      managerFilteredEntries = entries;
      managerActiveIndex = -1;

      if (!entries.length) {
        managerSearchEmpty.classList.remove('hidden');
        managerSearchEmpty.textContent = query ? 'Sem resultados' : 'Sem managers disponiveis';
        return;
      }

      managerSearchEmpty.classList.add('hidden');
      entries.forEach((entry, index) => {
        const optionButton = document.createElement('button');
        optionButton.type = 'button';
        optionButton.id = `manager-option-${entry.manager.id}`;
        optionButton.dataset.managerOption = 'true';
        optionButton.dataset.value = String(entry.manager.id);
        optionButton.dataset.index = String(index);
        optionButton.setAttribute('role', 'option');
        optionButton.className = 'flex w-full items-center justify-between gap-3 rounded-md px-4 py-2 text-left text-sm text-foreground transition-colors hover:bg-muted focus:bg-muted focus:outline-none';

        const labelWrapper = document.createElement('div');
        labelWrapper.className = 'flex flex-col';

        const nameElement = document.createElement('span');
        nameElement.className = 'font-medium';
        nameElement.textContent = entry.manager.name ?? '';
        labelWrapper.appendChild(nameElement);

        if (entry.manager.email) {
          const emailElement = document.createElement('span');
          emailElement.className = 'text-xs text-muted-foreground';
          emailElement.textContent = entry.manager.email;
          labelWrapper.appendChild(emailElement);
        }

        optionButton.appendChild(labelWrapper);

        const checkIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        checkIcon.setAttribute('viewBox', '0 0 24 24');
        checkIcon.setAttribute('width', '16');
        checkIcon.setAttribute('height', '16');
        checkIcon.classList.add('size-3.5', 'shrink-0', 'text-primary', 'hidden');
        checkIcon.setAttribute('data-manager-option-check', 'true');

        const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
        polyline.setAttribute('points', '20 6 9 17 4 12');
        polyline.setAttribute('fill', 'none');
        polyline.setAttribute('stroke', 'currentColor');
        polyline.setAttribute('stroke-width', '2');
        polyline.setAttribute('stroke-linecap', 'round');
        polyline.setAttribute('stroke-linejoin', 'round');
        checkIcon.appendChild(polyline);

        optionButton.appendChild(checkIcon);

        optionButton.addEventListener('pointerdown', (event) => {
          event.preventDefault();
          setManagerSelection(entry);
          closeManagerDropdown();
        });

        managerSearchResults.appendChild(optionButton);
      });
      syncManagerSelectionUI();
    }

    const progressFields = {
      user: document.getElementById('progress-user'),
      manager: document.getElementById('progress-manager'),
      engagement: document.getElementById('progress-engagement'),
      task: document.getElementById('progress-task'),
      deliverable: document.getElementById('progress-deliverable'),
      review: document.getElementById('progress-review'),
      start: document.getElementById('progress-start'),
    };

    let managerData = [];
    let managerFilteredEntries = [];
    let managerActiveIndex = -1;
    let managerSelectedId = null;
    let activeActivityId = null;
    let activityStartTimestamp = null;
    let timerInterval = null;

    const clearError = () => {
      activityError.classList.add('hidden');
      activityError.textContent = '';
    };

    const showError = (message) => {
      activityError.textContent = message;
      activityError.classList.remove('hidden');
    };

    const resetTimer = () => {
      if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
      }
      timerDisplay.textContent = '00:00';
    };

    const updateTimerDisplay = () => {
      if (!activityStartTimestamp) {
        timerDisplay.textContent = '00:00';
        return;
      }
      const elapsedSeconds = Math.max(0, Math.floor((Date.now() - activityStartTimestamp) / 1000));
      const minutes = Math.floor(elapsedSeconds / 60);
      const seconds = elapsedSeconds % 60;
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      const formatted = hours > 0
        ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
        : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
      timerDisplay.textContent = formatted;
    };

    const startTimer = () => {
      resetTimer();
      updateTimerDisplay();
      timerInterval = setInterval(updateTimerDisplay, 1000);
    };

    const formatLisbon = (isoString) => {
      const date = new Date(isoString);
      return date.toLocaleString('pt-PT', {
        timeZone: 'Europe/Lisbon',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      });
    };

    const resetSelect = (select, placeholder) => {
      select.innerHTML = '';
      const option = document.createElement('option');
      option.value = '';
      option.textContent = placeholder;
      select.appendChild(option);
      select.value = '';
    };

    const resetPeriodicitySelect = (placeholder = 'Seleciona um deliverable primeiro') => {
      if (!periodicitySelect) return;
      resetSelect(periodicitySelect, placeholder);
      periodicitySelect.disabled = true;
    };

    const updatePeriodicityForDeliverable = (deliverable) => {
      if (!periodicitySelect) {
        return;
      }

      if (!deliverable) {
        resetPeriodicitySelect('Seleciona o deliverable');
        return;
      }

      const periodicity = deliverable.periodicity ?? null;
      if (periodicity && periodicityLabelMap[periodicity]) {
        resetSelect(periodicitySelect, 'Periodicidade definida pelo manager');
        const periodicityOption = document.createElement('option');
        periodicityOption.value = periodicity;
        periodicityOption.textContent = periodicityLabelMap[periodicity];
        periodicitySelect.appendChild(periodicityOption);
        periodicitySelect.value = periodicity;
        periodicitySelect.disabled = true;
      } else {
        resetSelect(periodicitySelect, 'Seleciona a periodicidade');
        periodicityOptions.forEach((item) => {
          const periodicityOption = document.createElement('option');
          periodicityOption.value = item.value;
          periodicityOption.textContent = item.label;
          periodicitySelect.appendChild(periodicityOption);
        });
        periodicitySelect.disabled = false;
      }
    };

    const getPeriodicityLabel = (value) => {
      if (!value) {
        return '';
      }
      return periodicityLabelMap[value] ?? value;
    };

    const setActivityState = (isActive) => {
      availabilityTargets.forEach((element) => {
        element.classList.toggle('pointer-events-none', isActive);
        element.classList.toggle('opacity-50', isActive);
        if (isActive) {
          element.setAttribute('aria-disabled', 'true');
        } else {
          element.removeAttribute('aria-disabled');
        }
      });
      if (inProgressIndicator) {
        inProgressIndicator.classList.toggle('animate-pulse', isActive);
      }
      if (inProgressIndicatorDot) {
        inProgressIndicatorDot.classList.toggle('animate-ping', isActive);
      }
    };

    const applyActiveActivity = (activity, options = {}) => {
      if (!activity) {
        resetTimer();
        activeActivityId = null;
        activityStartTimestamp = null;
        inProgressSection.classList.add('hidden');
        setActivityState(false);
        resetPeriodicitySelect('Seleciona um deliverable primeiro');
        reviewTargetWrapper.classList.add('hidden');
        reviewCheckbox.checked = false;
        progressFields.user.textContent = 'Nao indicado';
        progressFields.manager.textContent = 'Nao indicado';
        progressFields.engagement.textContent = 'Nao indicado';
        progressFields.task.textContent = 'Nao selecionado';
        progressFields.deliverable.textContent = 'Nao selecionado';
        progressFields.review.textContent = 'Nao';
        progressFields.start.textContent = '';
        return;
      }

      const overrides = options.overrides ?? {};
      const resetForm = Boolean(options.resetForm);

      activeActivityId = activity.id ?? null;
      const parsedStartedAt = activity.started_at ? Date.parse(activity.started_at) : NaN;
      activityStartTimestamp = Number.isFinite(parsedStartedAt) ? parsedStartedAt : Date.now();

      stopMessage.classList.add('hidden');
      clearError();

      const defaultUserSummary = activity.user_name && activity.user_email
        ? `${activity.user_name} (${activity.user_email})`
        : (userName && userEmail ? `${userName} (${userEmail})` : 'Nao indicado');
      const managerSummary = overrides.manager ?? (
        activity.manager_name
          ? `${activity.manager_name}${activity.manager_email ? ` (${activity.manager_email})` : ''}`
          : 'Nao indicado'
      );
      const engagementSummary = overrides.engagement ?? (
        activity.engagement
          ? `${activity.engagement_code ? `[${activity.engagement_code}] ` : ''}${activity.engagement}`
          : 'Nao indicado'
      );
      const taskSummary = overrides.task ?? (activity.process ?? 'Nao selecionado');
      const deliverableSummary = overrides.deliverable ?? (activity.deliverable ?? 'Nao selecionado');
      const reviewSummary = overrides.review ?? (
        activity.is_review
          ? `Sim (${activity.review_target === 'GDS' ? 'GDS' : 'Staff'})`
          : 'Nao'
      );
      const startedText = activity.started_at ? formatLisbon(activity.started_at) : '';

      progressFields.user.textContent = overrides.user ?? defaultUserSummary;
      progressFields.manager.textContent = managerSummary;
      progressFields.engagement.textContent = engagementSummary;
      progressFields.task.textContent = taskSummary;
      progressFields.deliverable.textContent = deliverableSummary;
      progressFields.review.textContent = reviewSummary;
      progressFields.start.textContent = startedText;

      inProgressSection.classList.remove('hidden');
      setActivityState(true);
      updatePeriodicityForDeliverable(null);

      if (resetForm) {
        activityForm.reset();
        managerSelect.dispatchEvent(new Event('change'));
        reviewTargetWrapper.classList.add('hidden');
        reviewCheckbox.checked = false;
      }

      startTimer();
    };

    const fetchActiveActivity = async () => {
      try {
        const response = await fetch('/api/activities/current');
        if (!response.ok) {
          return;
        }
        const payload = await response.json();
        if (payload?.success) {
          applyActiveActivity(payload.activity ?? null);
        }
      } catch (error) {
        console.error('Failed to load current activity', error);
      }
    };

    const getSelectedEngagement = () => {
      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        return null;
      }
      const managerEntry = managerData.find((item) => item.manager.id === managerId);
      if (!managerEntry) {
        return null;
      }
      const engagement = managerEntry.engagements.find((item) => item.id === engagementId);
      if (!engagement) {
        return null;
      }
      return { managerEntry, engagement };
    };

    resetPeriodicitySelect();
    setActivityState(false);

    const populateManagers = () => {
      closeManagerDropdown();

      if (!managerSearchInput) {
        return;
      }

      const previousRawValue = managerSelect ? managerSelect.value : '';
      const previousId = Number.parseInt(previousRawValue, 10);
      const hadPreviousSelection = Number.isFinite(previousId);

      if (!managerData.length) {
        managerSearchInput.value = '';
        managerSearchInput.placeholder = 'Sem managers disponiveis';
        managerSearchInput.disabled = true;

        if (managerSearchResults) {
          managerSearchResults.innerHTML = '';
        }
        if (managerSearchEmpty) {
          managerSearchEmpty.classList.remove('hidden');
          managerSearchEmpty.textContent = 'Sem managers disponiveis';
        }

        setManagerSelection(null, true);
        resetPeriodicitySelect('Sem deliverables configurados');
        return;
      }

      managerSearchInput.disabled = false;
      managerSearchInput.placeholder = 'Seleciona o manager';

      renderManagerResults(managerData);

      if (hadPreviousSelection) {
        const existingEntry = managerData.find((item) => item.manager.id === previousId) ?? null;
        if (existingEntry) {
          managerSelectedId = existingEntry.manager.id;
          managerSearchInput.value = formatManagerLabel(existingEntry);
          syncManagerSelectionUI();
        } else {
          setManagerSelection(null, true);
        }
      } else {
        managerSelectedId = null;
        if (!managerSearchInput.matches(':focus')) {
          managerSearchInput.value = '';
        }
        syncManagerSelectionUI();
      }
    };

    const populateEngagements = (engagements) => {
      resetSelect(engagementSelect, engagements.length ? 'Seleciona o engagement' : 'Sem engagements configurados');
      engagements.forEach((engagement) => {
        const option = document.createElement('option');
        option.value = String(engagement.id);
        const codePart = engagement.engagement_code ? `[${engagement.engagement_code}] ` : '';
        option.textContent = `${codePart}${engagement.engagement_name}`;
        engagementSelect.appendChild(option);
      });
      engagementSelect.disabled = engagements.length === 0;
    };

    const populateTasks = (tasks) => {
      resetSelect(taskSelect, tasks.length ? 'Seleciona a tarefa' : 'Sem tarefas configuradas');
      tasks.forEach((task) => {
        const option = document.createElement('option');
        option.value = String(task.id);
        option.textContent = task.label;
        taskSelect.appendChild(option);
      });
      taskSelect.disabled = tasks.length === 0;
    };

    const populateDeliverables = (deliverables) => {
      resetSelect(deliverableSelect, deliverables.length ? 'Seleciona o deliverable' : 'Sem deliverables configurados');
      deliverables.forEach((deliverable) => {
        const option = document.createElement('option');
        option.value = String(deliverable.id);
        option.textContent = deliverable.label;
        deliverableSelect.appendChild(option);
      });
      deliverableSelect.disabled = deliverables.length === 0;
      resetPeriodicitySelect(deliverables.length ? 'Seleciona o deliverable' : 'Sem deliverables configurados');
    };

    managerSelect.addEventListener('change', () => {
      closeManagerDropdown();

      const managerId = Number.parseInt(managerSelect.value, 10);
      managerSelectedId = Number.isFinite(managerId) ? managerId : null;

      if (!Number.isFinite(managerId) && managerSearchInput && !managerSearchInput.matches(':focus')) {
        managerSearchInput.value = '';
      }

      syncManagerSelectionUI();

      resetSelect(engagementSelect, 'Seleciona o engagement');
      resetSelect(taskSelect, 'Seleciona o engagement primeiro');
      resetSelect(deliverableSelect, 'Seleciona o engagement primeiro');
      resetPeriodicitySelect('Seleciona um deliverable primeiro');
      engagementSelect.disabled = true;
      taskSelect.disabled = true;
      deliverableSelect.disabled = true;

      if (!Number.isFinite(managerId)) {
        return;
      }
      const entry = managerData.find((item) => item.manager.id === managerId);
      if (!entry) {
        return;
      }
      if (managerSearchInput && !managerSearchInput.matches(':focus')) {
        managerSearchInput.value = formatManagerLabel(entry);
      }
      populateEngagements(entry.engagements);
    });

    if (managerSearchInput) {
      managerSearchInput.addEventListener('focus', () => {
        if (managerSearchInput.disabled) {
          return;
        }
        const query = managerSearchInput.value;
        const filtered = filterManagers(query);
        renderManagerResults(filtered, query);
        if (filtered.length || query.trim()) {
          openManagerDropdown();
        } else if (managerData.length) {
          openManagerDropdown();
        }
      });

      managerSearchInput.addEventListener('input', () => {
        if (managerSearchInput.disabled) {
          return;
        }
        const query = managerSearchInput.value;
        if (managerSelectedId !== null) {
          setManagerSelection(null, true);
        }
        const filtered = filterManagers(query);
        renderManagerResults(filtered, query);
        openManagerDropdown();
      });

      managerSearchInput.addEventListener('keydown', (event) => {
        if (event.key === 'ArrowDown') {
          if (!isManagerDropdownOpen()) {
            const filtered = filterManagers(managerSearchInput.value);
            renderManagerResults(filtered, managerSearchInput.value);
            if (filtered.length || managerData.length) {
              openManagerDropdown();
            }
          }
          if (managerFilteredEntries.length) {
            event.preventDefault();
            const nextIndex = managerActiveIndex < 0
              ? 0
              : Math.min(managerActiveIndex + 1, managerFilteredEntries.length - 1);
            updateManagerActiveOption(nextIndex);
          }
        } else if (event.key === 'ArrowUp') {
          if (!isManagerDropdownOpen()) {
            const filtered = filterManagers(managerSearchInput.value);
            renderManagerResults(filtered, managerSearchInput.value);
            if (filtered.length || managerData.length) {
              openManagerDropdown();
            }
          }
          if (managerFilteredEntries.length) {
            event.preventDefault();
            const nextIndex = managerActiveIndex <= 0
              ? managerFilteredEntries.length - 1
              : managerActiveIndex - 1;
            updateManagerActiveOption(nextIndex);
          }
        } else if (event.key === 'Enter') {
          if (isManagerDropdownOpen() && managerActiveIndex >= 0 && managerFilteredEntries[managerActiveIndex]) {
            event.preventDefault();
            const entry = managerFilteredEntries[managerActiveIndex];
            setManagerSelection(entry);
            closeManagerDropdown();
          }
        } else if (event.key === 'Escape') {
          if (isManagerDropdownOpen()) {
            event.preventDefault();
            closeManagerDropdown();
          }
        }
      });

      managerSearchInput.addEventListener('blur', () => {
        setTimeout(() => closeManagerDropdown(), 120);
      });
    }

    if (managerSearchBox) {
      document.addEventListener('pointerdown', (event) => {
        if (!isManagerDropdownOpen()) {
          return;
        }
        if (event.target instanceof Node && managerSearchBox.contains(event.target)) {
          return;
        }
        closeManagerDropdown();
      });
    }

    engagementSelect.addEventListener('change', () => {
      resetSelect(taskSelect, 'Seleciona a tarefa');
      resetSelect(deliverableSelect, 'Seleciona o deliverable');
      resetPeriodicitySelect('Seleciona o deliverable');
      taskSelect.disabled = true;
      deliverableSelect.disabled = true;

      const selection = getSelectedEngagement();
      if (!selection) {
        return;
      }
      const { engagement } = selection;
      populateTasks(engagement.tasks ?? []);
      populateDeliverables(engagement.deliverables ?? []);
    });

    deliverableSelect.addEventListener('change', () => {
      const selection = getSelectedEngagement();
      if (!selection) {
        resetPeriodicitySelect('Seleciona um deliverable primeiro');
        return;
      }
      const deliverableId = Number.parseInt(deliverableSelect.value, 10);
      if (!Number.isFinite(deliverableId)) {
        updatePeriodicityForDeliverable(null);
        return;
      }
      const deliverable = selection.engagement.deliverables?.find((item) => item.id === deliverableId) ?? null;
      updatePeriodicityForDeliverable(deliverable ?? null);
    });

    reviewCheckbox.addEventListener('change', () => {
      if (reviewCheckbox.checked) {
        reviewTargetWrapper.classList.remove('hidden');
      } else {
        reviewTargetWrapper.classList.add('hidden');
        const checked = reviewTargetWrapper.querySelector('input[name="review-target"]:checked');
        if (checked) {
          checked.checked = false;
        }
      }
    });

    const loadOptions = async () => {
      try {
        const response = await fetch('/api/engagements/options');
        const payload = await response.json();
        if (!response.ok || !payload?.success) {
          throw new Error(payload?.message || 'Não foi possível carregar as op��es.');
        }
        managerData = payload.managers ?? [];
        populateManagers();
        resetPeriodicitySelect();
        clearError();
      } catch (error) {
        managerData = [];
        populateManagers();
        resetPeriodicitySelect('Sem deliverables configurados');
        showError(error instanceof Error ? error.message : 'Não foi possível carregar os managers.');
      }
    };

    loadOptions();
    fetchActiveActivity();

    activityForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      clearError();
      stopMessage.classList.add('hidden');

      if (activeActivityId) {
        showError('Termina ou pausa a atividade em curso antes de iniciar uma nova.');
        return;
      }

      if (!userName || !userEmail) {
        showError('Não foi possível validar o utilizador. Termina sessão e volta a entrar.');
        return;
      }

      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      const taskId = taskSelect.disabled || !taskSelect.value ? null : Number.parseInt(taskSelect.value, 10);
      const deliverableId = deliverableSelect.disabled || !deliverableSelect.value ? null : Number.parseInt(deliverableSelect.value, 10);
      const periodicityValueRaw = periodicitySelect ? periodicitySelect.value.trim() : '';
      const periodicityRequired = deliverableId !== null && periodicitySelect && !periodicitySelect.disabled;
      const isReview = reviewCheckbox.checked;
      const reviewTargetRadio = reviewCheckbox.checked
        ? reviewTargetWrapper.querySelector('input[name="review-target"]:checked')
        : null;
      const reviewTarget = reviewTargetRadio ? reviewTargetRadio.value : null;

      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        showError('Seleciona o manager e o engagement.');
        return;
      }

      if (periodicityRequired && !periodicityValueRaw) {
        showError('Seleciona a periodicidade do deliverable.');
        return;
      }

      if (isReview && !reviewTarget) {
        showError('Seleciona se a revis�o � a outro staff ou ao trabalho do GDS.');
        return;
      }

      const selection = getSelectedEngagement();
      if (!selection) {
        showError('Seleciona o manager e o engagement.');
        return;
      }

      const { managerEntry, engagement } = selection;
      const taskEntry = engagement.tasks?.find((item) => item.id === taskId) ?? null;
      const deliverableEntry = engagement.deliverables?.find((item) => item.id === deliverableId) ?? null;

      try {
        const response = await fetch('/api/activities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            managerId,
            engagementId,
            taskId,
            deliverableId,
            isReview,
            reviewTarget,
          }),
        });
        const result = await response.json();
        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível iniciar a atividade.');
        }

        const { activity } = result;

        const periodicityValueResolved = periodicityValueRaw || (deliverableEntry?.periodicity ?? '');
        const periodicityLabel = getPeriodicityLabel(periodicityValueResolved);
        const deliverableLabel = deliverableEntry?.label ?? 'Nao selecionado';
        const deliverableDisplay = periodicityLabel && deliverableEntry
          ? `${deliverableLabel} (${periodicityLabel})`
          : deliverableEntry
            ? deliverableLabel
            : 'Nao selecionado';

        const hydratedActivity = {
          ...activity,
          user_name: userName,
          user_email: userEmail,
          manager_name: managerEntry?.manager.name ?? null,
          manager_email: managerEntry?.manager.email ?? null,
          engagement: engagement?.engagement_name ?? null,
          engagement_code: engagement?.engagement_code ?? null,
          process: taskEntry?.label ?? null,
          deliverable: deliverableDisplay,
          is_review: isReview,
          review_target: reviewTarget ?? null,
        };

        applyActiveActivity(hydratedActivity, { resetForm: true });
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível iniciar a atividade.');
      }
    });

    document.getElementById('stop-button').addEventListener('click', async () => {
      if (!activeActivityId) {
        return;
      }
      stopMessage.classList.add('hidden');
      clearError();

      try {
        const response = await fetch(`/api/activities/${activeActivityId}`, {
          method: 'PATCH',
        });
        const result = await response.json();

        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível terminar a atividade.');
        }

        applyActiveActivity(null);

        const endedAt = result.activity.ended_at;
        const durationSeconds = result.activity.duration_seconds;

        const minutes = Math.floor(durationSeconds / 60);
        const seconds = durationSeconds % 60;
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        const formattedDuration = hours > 0
          ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
          : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        stopMessage.textContent = `Atividade conclu�da �s ${formatLisbon(endedAt)} (dura��o: ${formattedDuration}).`;
        stopMessage.classList.remove('hidden');
        setTimeout(() => stopMessage.classList.add('hidden'), 4000);
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível terminar a atividade.');
      }
    });
  </script>
  </div>
</Layout>



