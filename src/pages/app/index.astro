---
import Layout from "@/layouts/Layout.astro";
import { buttonVariants } from "@/components/ui/button";
import { Label } from "@/components/ui/label";

const user = Astro.locals.user;
---

<Layout title="Nova atividade">
  <div class="space-y-10">
    <section class="rounded-xl border bg-card p-6 shadow">
      <h2 class="text-lg font-semibold">Os teus dados</h2>
      {user ? (
        <dl class="mt-4 grid gap-4 md:grid-cols-2 text-sm">
          <div>
            <dt class="text-muted-foreground">Nome</dt>
            <dd class="font-medium">{user.name}</dd>
          </div>
          <div>
            <dt class="text-muted-foreground">E-mail</dt>
            <dd class="font-medium">{user.email}</dd>
          </div>
          <div>
            <dt class="text-muted-foreground">Rank</dt>
            <dd class="font-medium">{user.rank}</dd>
          </div>
        </dl>
      ) : (
        <p class="mt-4 text-sm text-muted-foreground">Não foi possível carregar os teus dados.</p>
      )}
    </section>

    <section class="rounded-xl border bg-card p-6 shadow space-y-6">
      <div>
        <h2 class="text-xl font-semibold">Nova atividade</h2>
        <p class="text-sm text-muted-foreground">Seleciona o manager, engagement e tarefa que vais executar.</p>
      </div>
      <form id="activity-form" class="space-y-4">
        <div class="space-y-2">
          <Label htmlFor="manager-select">Manager</Label>
          <select
            id="manager-select"
            class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            required
            disabled
          >
            <option value="">A carregar managers...</option>
          </select>
        </div>

        <div class="space-y-2">
          <Label htmlFor="engagement-select">Engagement</Label>
          <select
            id="engagement-select"
            class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            required
            disabled
          >
            <option value="">Seleciona um manager primeiro</option>
          </select>
        </div>

        <div class="grid gap-4 md:grid-cols-2">
          <div class="space-y-2">
            <Label htmlFor="task-select">Tarefa</Label>
            <select
              id="task-select"
              class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              disabled
            >
              <option value="">Seleciona um engagement primeiro</option>
            </select>
          </div>
          <div class="space-y-2">
            <Label htmlFor="deliverable-select">Deliverable</Label>
            <select
              id="deliverable-select"
              class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              disabled
            >
              <option value="">Seleciona um engagement primeiro</option>
            </select>
          </div>
        </div>

        <div class="space-y-2">
          <div class="flex items-center gap-2">
            <input type="checkbox" id="is-review" class="h-4 w-4 rounded border border-input" />
            <Label htmlFor="is-review" class="text-sm font-medium">Revisão de trabalho realizado</Label>
          </div>
          <div id="review-target-wrapper" class="hidden ml-6 space-y-2">
            <p class="text-sm text-muted-foreground">Indica o alvo da revisão:</p>
            <div class="flex flex-col gap-2">
              <label class="inline-flex items-center gap-2 text-sm">
                <input type="radio" name="review-target" value="Staff" class="h-4 w-4 border-input" />
                Outro staff
              </label>
              <label class="inline-flex items-center gap-2 text-sm">
                <input type="radio" name="review-target" value="GDS" class="h-4 w-4 border-input" />
                Trabalho do GDS
              </label>
            </div>
          </div>
        </div>

        <button type="submit" class={buttonVariants({ size: "lg" })}>
          Iniciar atividade
        </button>
        <p id="activity-error" class="text-sm text-red-600 hidden"></p>
      </form>
    </section>

    <section id="in-progress" class="hidden space-y-4 rounded-xl border border-dashed bg-card p-6 shadow">
      <div class="flex items-start justify-between">
        <div>
          <h2 class="text-xl font-semibold">Atividade em curso</h2>
          <p class="text-sm text-muted-foreground">Mantém este separador aberto enquanto trabalhas.</p>
        </div>
        <span id="timer" class="text-3xl font-bold">00:00</span>
      </div>

      <dl class="grid gap-4 md:grid-cols-2 text-sm">
        <div>
          <dt class="font-medium text-muted-foreground">Colaborador</dt>
          <dd id="progress-user"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Manager</dt>
          <dd id="progress-manager"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Engagement</dt>
          <dd id="progress-engagement"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Tarefa</dt>
          <dd id="progress-task"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Deliverable</dt>
          <dd id="progress-deliverable"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Revisão</dt>
          <dd id="progress-review"></dd>
        </div>
        <div>
          <dt class="font-medium text-muted-foreground">Início</dt>
          <dd id="progress-start"></dd>
        </div>
      </dl>

      <button id="stop-button" class={buttonVariants({ size: "lg", variant: "destructive" })}>
        Parar atividade
      </button>
      <p id="stop-message" class="text-sm text-green-600 hidden"></p>
    </section>
  </div>

  <script is:inline>
    const activityForm = document.getElementById('activity-form');
    const inProgressSection = document.getElementById('in-progress');
    const activityError = document.getElementById('activity-error');
    const stopMessage = document.getElementById('stop-message');
    const timerDisplay = document.getElementById('timer');

    const managerSelect = document.getElementById('manager-select');
    const engagementSelect = document.getElementById('engagement-select');
    const taskSelect = document.getElementById('task-select');
    const deliverableSelect = document.getElementById('deliverable-select');
    const reviewCheckbox = document.getElementById('is-review');
    const reviewTargetWrapper = document.getElementById('review-target-wrapper');

    const progressFields = {
      user: document.getElementById('progress-user'),
      manager: document.getElementById('progress-manager'),
      engagement: document.getElementById('progress-engagement'),
      task: document.getElementById('progress-task'),
      deliverable: document.getElementById('progress-deliverable'),
      review: document.getElementById('progress-review'),
      start: document.getElementById('progress-start'),
    };

    const userName = {JSON.stringify(user?.name ?? '')};
    const userEmail = {JSON.stringify(user?.email ?? '')};

    let managerData = [];
    let activeActivityId = null;
    let activityStartTimestamp = null;
    let timerInterval = null;

    const clearError = () => {
      activityError.classList.add('hidden');
      activityError.textContent = '';
    };

    const showError = (message) => {
      activityError.textContent = message;
      activityError.classList.remove('hidden');
    };

    const resetTimer = () => {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
      timerDisplay.textContent = '00:00';
    };

    const startTimer = () => {
      resetTimer();
      timerInterval = setInterval(() => {
        if (!activityStartTimestamp) return;
        const elapsedSeconds = Math.floor((Date.now() - activityStartTimestamp) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        const formatted = hours > 0
          ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
          : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        timerDisplay.textContent = formatted;
      }, 1000);
    };

    const formatLisbon = (isoString) => {
      const date = new Date(isoString);
      return date.toLocaleString('pt-PT', {
        timeZone: 'Europe/Lisbon',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      });
    };

    const resetSelect = (select, placeholder) => {
      select.innerHTML = '';
      const option = document.createElement('option');
      option.value = '';
      option.textContent = placeholder;
      select.appendChild(option);
      select.value = '';
    };

    const populateManagers = () => {
      if (!managerData.length) {
        resetSelect(managerSelect, 'Sem managers disponíveis');
        managerSelect.disabled = true;
        return;
      }
      resetSelect(managerSelect, 'Seleciona o manager');
      managerData.forEach((entry) => {
        const option = document.createElement('option');
        option.value = String(entry.manager.id);
        option.textContent = `${entry.manager.name} (${entry.manager.email})`;
        managerSelect.appendChild(option);
      });
      managerSelect.disabled = false;
    };

    const populateEngagements = (engagements) => {
      resetSelect(engagementSelect, engagements.length ? 'Seleciona o engagement' : 'Sem engagements configurados');
      engagements.forEach((engagement) => {
        const option = document.createElement('option');
        option.value = String(engagement.id);
        const codePart = engagement.engagement_code ? `[${engagement.engagement_code}] ` : '';
        option.textContent = `${codePart}${engagement.engagement_name}`;
        engagementSelect.appendChild(option);
      });
      engagementSelect.disabled = engagements.length === 0;
    };

    const populateTasks = (tasks) => {
      resetSelect(taskSelect, tasks.length ? 'Seleciona a tarefa' : 'Sem tarefas configuradas');
      tasks.forEach((task) => {
        const option = document.createElement('option');
        option.value = String(task.id);
        option.textContent = task.label;
        taskSelect.appendChild(option);
      });
      taskSelect.disabled = tasks.length === 0;
    };

    const populateDeliverables = (deliverables) => {
      resetSelect(deliverableSelect, deliverables.length ? 'Seleciona o deliverable' : 'Sem deliverables configurados');
      deliverables.forEach((deliverable) => {
        const option = document.createElement('option');
        option.value = String(deliverable.id);
        option.textContent = deliverable.label;
        deliverableSelect.appendChild(option);
      });
      deliverableSelect.disabled = deliverables.length === 0;
    };

    managerSelect.addEventListener('change', () => {
      resetSelect(engagementSelect, 'Seleciona o engagement');
      resetSelect(taskSelect, 'Seleciona o engagement primeiro');
      resetSelect(deliverableSelect, 'Seleciona o engagement primeiro');
      engagementSelect.disabled = true;
      taskSelect.disabled = true;
      deliverableSelect.disabled = true;

      const managerId = Number.parseInt(managerSelect.value, 10);
      if (!Number.isFinite(managerId)) {
        return;
      }
      const entry = managerData.find((item) => item.manager.id === managerId);
      if (!entry) {
        return;
      }
      populateEngagements(entry.engagements);
    });

    engagementSelect.addEventListener('change', () => {
      resetSelect(taskSelect, 'Seleciona a tarefa');
      resetSelect(deliverableSelect, 'Seleciona o deliverable');
      taskSelect.disabled = true;
      deliverableSelect.disabled = true;

      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        return;
      }
      const managerEntry = managerData.find((item) => item.manager.id === managerId);
      if (!managerEntry) return;
      const engagement = managerEntry.engagements.find((item) => item.id === engagementId);
      if (!engagement) return;
      populateTasks(engagement.tasks ?? []);
      populateDeliverables(engagement.deliverables ?? []);
    });

    reviewCheckbox.addEventListener('change', () => {
      if (reviewCheckbox.checked) {
        reviewTargetWrapper.classList.remove('hidden');
      } else {
        reviewTargetWrapper.classList.add('hidden');
        const checked = reviewTargetWrapper.querySelector('input[name="review-target"]:checked');
        if (checked) {
          checked.checked = false;
        }
      }
    });

    const loadOptions = async () => {
      try {
        const response = await fetch('/api/engagements/options');
        const payload = await response.json();
        if (!response.ok || !payload?.success) {
          throw new Error(payload?.message || 'Não foi possível carregar as opções.');
        }
        managerData = payload.managers ?? [];
        populateManagers();
        clearError();
      } catch (error) {
        managerData = [];
        populateManagers();
        showError(error instanceof Error ? error.message : 'Não foi possível carregar os managers.');
      }
    };

    loadOptions();

    activityForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      clearError();
      stopMessage.classList.add('hidden');

      if (!userName || !userEmail) {
        showError('Não foi possível validar o utilizador. Termina sessão e volta a entrar.');
        return;
      }

      const managerId = Number.parseInt(managerSelect.value, 10);
      const engagementId = Number.parseInt(engagementSelect.value, 10);
      const taskId = taskSelect.disabled || !taskSelect.value ? null : Number.parseInt(taskSelect.value, 10);
      const deliverableId = deliverableSelect.disabled || !deliverableSelect.value ? null : Number.parseInt(deliverableSelect.value, 10);
      const isReview = reviewCheckbox.checked;
      const reviewTargetRadio = reviewCheckbox.checked
        ? reviewTargetWrapper.querySelector('input[name="review-target"]:checked')
        : null;
      const reviewTarget = reviewTargetRadio ? reviewTargetRadio.value : null;

      if (!Number.isFinite(managerId) || !Number.isFinite(engagementId)) {
        showError('Seleciona o manager e o engagement.');
        return;
      }

      if (isReview && !reviewTarget) {
        showError('Seleciona se a revisão é a outro staff ou ao trabalho do GDS.');
        return;
      }

      try {
        const response = await fetch('/api/activities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            managerId,
            engagementId,
            taskId,
            deliverableId,
            isReview,
            reviewTarget,
          }),
        });
        const result = await response.json();
        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível iniciar a atividade.');
        }

        const { activity } = result;
        activeActivityId = activity.id;
        activityStartTimestamp = Date.parse(activity.started_at);

        const managerEntry = managerData.find((item) => item.manager.id === managerId);
        const engagementEntry = managerEntry?.engagements.find((item) => item.id === engagementId);
        const taskEntry = engagementEntry?.tasks?.find((item) => item.id === taskId);
        const deliverableEntry = engagementEntry?.deliverables?.find((item) => item.id === deliverableId);

        progressFields.user.textContent = `${userName} (${userEmail})`;
        progressFields.manager.textContent = managerEntry
          ? `${managerEntry.manager.name} (${managerEntry.manager.email})`
          : 'Não indicado';
        progressFields.engagement.textContent = engagementEntry
          ? `${engagementEntry.engagement_code ? `[${engagementEntry.engagement_code}] ` : ''}${engagementEntry.engagement_name}`
          : 'Não indicado';
        progressFields.task.textContent = taskEntry?.label ?? 'Não selecionado';
        progressFields.deliverable.textContent = deliverableEntry?.label ?? 'Não selecionado';
        progressFields.review.textContent = isReview
          ? `Sim (${reviewTarget === 'GDS' ? 'GDS' : 'Staff'})`
          : 'Não';
        progressFields.start.textContent = formatLisbon(activity.started_at);

        inProgressSection.classList.remove('hidden');
        startTimer();
        activityForm.reset();
        managerSelect.dispatchEvent(new Event('change'));
        reviewTargetWrapper.classList.add('hidden');
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível iniciar a atividade.');
      }
    });

    document.getElementById('stop-button').addEventListener('click', async () => {
      if (!activeActivityId) {
        return;
      }
      stopMessage.classList.add('hidden');
      clearError();

      try {
        const response = await fetch(`/api/activities/${activeActivityId}`, {
          method: 'PATCH',
        });
        const result = await response.json();

        if (!response.ok || !result?.success) {
          throw new Error(result?.message || 'Não foi possível terminar a atividade.');
        }

        resetTimer();
        inProgressSection.classList.add('hidden');
        activeActivityId = null;
        activityStartTimestamp = null;

        const endedAt = result.activity.ended_at;
        const durationSeconds = result.activity.duration_seconds;

        const minutes = Math.floor(durationSeconds / 60);
        const seconds = durationSeconds % 60;
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        const formattedDuration = hours > 0
          ? `${String(hours).padStart(2, '0')}:${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
          : `${String(remainingMinutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        stopMessage.textContent = `Atividade concluída às ${formatLisbon(endedAt)} (duração: ${formattedDuration}).`;
        stopMessage.classList.remove('hidden');
        setTimeout(() => stopMessage.classList.add('hidden'), 4000);
      } catch (error) {
        showError(error instanceof Error ? error.message : 'Não foi possível terminar a atividade.');
      }
    });
  </script>
</Layout>
