---
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { buttonVariants } from "@/components/ui/button";
import "@/styles/globals.css";
---

<!doctype html>
<html lang="pt">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Lumio | Autenticação</title>
  </head>
  <body class="bg-background text-foreground">
    <div class="min-h-screen flex items-center justify-center px-6 py-12">
      <div class="w-full max-w-4xl space-y-10 rounded-2xl border bg-card p-10 shadow-xl">
        <header class="space-y-2 text-center">
          <h1 class="text-3xl font-bold">Bem-vindo ao Lumio</h1>
          <p class="text-sm text-muted-foreground">
            Inicia sessão com o teu e-mail e password ou cria uma nova conta para comecar a registar atividades.
          </p>
        </header>

        <div class="grid gap-8 lg:grid-cols-2">
          <section class="space-y-6">
            <div>
              <h2 class="text-xl font-semibold">Iniciar sessão</h2>
              <p class="text-sm text-muted-foreground">Acede ao teu espaço com o e-mail e password.</p>
            </div>
            <form id="login-form" class="space-y-4">
              <div class="space-y-2">
                <Label htmlFor="login-email">E-mail</Label>
                <Input id="login-email" name="email" type="email" required placeholder="nome@empresa.com" autocomplete="email" />
              </div>
              <div class="space-y-2">
                <Label htmlFor="login-password">Password</Label>
                <Input id="login-password" name="password" type="password" required minlength="8" autocomplete="current-password" />
              </div>
              <button type="submit" class={buttonVariants({ size: "lg" })}>
                Entrar
              </button>
              <p id="login-error" class="text-sm text-red-600 hidden"></p>
            </form>
          </section>

          <section class="space-y-6">
            <div>
              <h2 class="text-xl font-semibold">Criar conta</h2>
              <p class="text-sm text-muted-foreground">Indica o teu nome, e-mail e define uma password.</p>
            </div>
            <form id="register-form" class="space-y-4">
              <div class="space-y-2">
                <Label htmlFor="register-name">Nome</Label>
                <Input id="register-name" name="name" type="text" required placeholder="O teu nome" autocomplete="name" />
              </div>
              <div class="space-y-2">
                <Label htmlFor="register-email">E-mail</Label>
                <Input id="register-email" name="email" type="email" required placeholder="nome@empresa.com" autocomplete="email" />
              </div>

              <div class="space-y-2">
                <Label htmlFor="register-rank">Rank</Label>
                <select
                  id="register-rank"
                  name="rank"
                  class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  required
                >
                  <option value="Staff">Staff</option>
                  <option value="Senior">Senior</option>
                  <option value="Manager">Manager</option>
                </select>
              </div>
              <div class="space-y-2">
                <Label htmlFor="register-password">Password</Label>
                <Input id="register-password" name="password" type="password" required minlength="8" autocomplete="new-password" />
                <p class="text-xs text-muted-foreground">A password deve ter, no mínimo, 8 caracteres.</p>
              </div>
              <button type="submit" class={buttonVariants({ size: "lg", variant: "secondary" })}>
                Criar conta
              </button>
              <p id="register-error" class="text-sm text-red-600 hidden"></p>
            </form>
          </section>
        </div>
      </div>
    </div>

    <script is:inline>
      const loginForm = document.getElementById('login-form');
      const registerForm = document.getElementById('register-form');
      const loginError = document.getElementById('login-error');
      const registerError = document.getElementById('register-error');

      loginForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        loginError.classList.add('hidden');
        loginError.textContent = '';

        const formData = new FormData(loginForm);
        const payload = {
          email: formData.get('email'),
          password: formData.get('password'),
        };

        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
          });

          const result = await response.json().catch(() => ({}));

          if (!response.ok) {
            throw new Error(result.message || 'Não foi possivel iniciar sessão');
          }

          window.location.href = '/app';
        } catch (error) {
          loginError.textContent = error.message;
          loginError.classList.remove('hidden');
        }
      });

      registerForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        registerError.classList.add('hidden');
        registerError.textContent = '';

        const formData = new FormData(registerForm);
        const payload = {
          name: formData.get('name'),
          email: formData.get('email'),
          password: formData.get('password'),
          rank: (formData.get('rank') || 'Staff'),
        };

        try {
          const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
          });

          const result = await response.json().catch(() => ({}));

          if (!response.ok) {
            throw new Error(result.message || 'Não foi possivel criar a conta');
          }

          window.location.href = '/app';
        } catch (error) {
          registerError.textContent = error.message;
          registerError.classList.remove('hidden');
        }
      });
    </script>
  </body>
</html>
